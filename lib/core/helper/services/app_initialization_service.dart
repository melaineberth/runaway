import 'dart:async';

import 'package:runaway/core/helper/services/lottie_preload_service.dart';
import 'package:runaway/features/route_generator/data/services/reverse_geocoding_service.dart';
import 'package:runaway/core/helper/services/location_preload_service.dart';
import 'package:runaway/core/helper/config/log_config.dart';

/// Service pour initialiser les diff√©rents composants de l'application au d√©marrage
class AppInitializationService {
  
  /// Initialise tous les services n√©cessaires au d√©marrage de l'application
  static Future<void> initialize() async {
    LogConfig.logInfo('üöÄ === INITIALISATION RAPIDE DE L\'APPLICATION ===');
      
    // D√©marrer la g√©olocalisation en premier
    final locationFuture = _initializeLocationServiceImmediate();

    // Pr√©charger les animations Lottie en parall√®le
    final lottieFuture = _initializeLottiePreloading();
    
    // Autres services en parall√®le (non bloquants)
    final otherServicesFutures = [
      _cleanupReverseGeocodingCache(),
    ];
    
    // Attendre les services non critiques
    await Future.wait(otherServicesFutures);
    
    // V√©rifier l'√©tat de la g√©olocalisation (sans bloquer)
    _checkLocationInitializationStatus(locationFuture);

    // V√©rifier l'√©tat du pr√©chargement Lottie (sans bloquer)
    _checkLottiePreloadingStatus(lottieFuture);
    
    LogConfig.logInfo('Initialisation de l\'application termin√©e');
  }

  /// üöÄ Initialise la g√©olocalisation imm√©diatement et en arri√®re-plan
  static Future<void> _initializeLocationServiceImmediate() async {
    print('üåç D√©marrage IMM√âDIAT du pr√©-chargement g√©olocalisation...');
    
    // Fire-and-forget: d√©marrer le processus imm√©diatement
    LocationPreloadService.instance.initializeLocation().then((position) {
      LogConfig.logInfo('üéØ G√©olocalisation pr√©-charg√©e avec succ√®s: ${position.latitude}, ${position.longitude}');
    }).catchError((e) {
      LogConfig.logInfo('Pr√©-chargement g√©olocalisation √©chou√© (non bloquant): $e');
      // Ne pas bloquer l'app, l'utilisateur aura juste un loader un peu plus long
    });
  }

  /// Pr√©charge les animations Lottie imm√©diatement
  static Future<void> _initializeLottiePreloading() async {
    print('üé¨ D√©marrage IMM√âDIAT du pr√©-chargement animations Lottie...');
    
    // Fire-and-forget: d√©marrer le processus imm√©diatement
    LottiePreloadService.instance.preloadAuthModalLottie().then((_) {
      LogConfig.logInfo('üéØ Animation Lottie auth modal pr√©-charg√©e avec succ√®s');
    }).catchError((e) {
      LogConfig.logInfo('Pr√©-chargement animation Lottie √©chou√© (non bloquant): $e');
      // Ne pas bloquer l'app, fallback vers le r√©seau
    });
  }

  /// üîç V√©rifie l'√©tat de l'initialisation g√©olocalisation sans bloquer
  static void _checkLocationInitializationStatus(Future<void> locationFuture) {
    // V√©rification apr√®s 2 secondes pour voir si c'est pr√™t
    Timer(Duration(seconds: 2), () {
      if (LocationPreloadService.instance.hasValidPosition) {
        print('üéâ G√©olocalisation pr√™te en 2s - UX optimale !');
      } else {
        LogConfig.logInfo('‚è≥ G√©olocalisation encore en cours apr√®s 2s');
      }
    });
  }

  /// Initialise le pr√©-chargement des donn√©es une fois l'authentification pr√™te
  static Future<void> initializeDataPreloading() async {
    LogConfig.logInfo('üìä Initialisation du syst√®me de pr√©-chargement...');
    
    // Le pr√©-chargement sera d√©clench√© automatiquement 
    // quand l'utilisateur s'authentifie via l'AuthListener
    
    LogConfig.logInfo('Syst√®me de pr√©-chargement pr√™t');
  }
    
  /// Nettoie le cache de reverse geocoding (non bloquant)
  static Future<void> _cleanupReverseGeocodingCache() async {
    try {
      await ReverseGeocodingService.cleanExpiredCache();
      LogConfig.logInfo('Cache de g√©ocodage nettoy√©');
    } catch (e) {
      LogConfig.logError('‚ùå Erreur nettoyage cache g√©ocodage: $e');
      // Non bloquant, l'app peut continuer
    }
  }

  /// V√©rifie l'√©tat du pr√©chargement Lottie sans bloquer
  static void _checkLottiePreloadingStatus(Future<void> lottieFuture) {
    // V√©rification apr√®s 2 secondes pour voir si c'est pr√™t
    Timer(Duration(seconds: 2), () {
      if (LottiePreloadService.instance.isAuthModalLottieLoaded) {
        print('üéâ Animation Lottie pr√™te en 2s - UX optimale !');
      } else {
        LogConfig.logInfo('‚è≥ Pr√©chargement Lottie encore en cours apr√®s 2s');
      }
    });
  }
}
