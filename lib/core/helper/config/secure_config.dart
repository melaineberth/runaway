import 'dart:convert';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:runaway/core/helper/config/log_config.dart';

class SecureConfig {
  static const bool kIsProduction = bool.fromEnvironment('PRODUCTION');
  
  // üîí Configuration am√©lior√©e pour √©viter les conflits
  static const FlutterSecureStorage _secureStorage = FlutterSecureStorage(
    aOptions: AndroidOptions(
      encryptedSharedPreferences: true,
      sharedPreferencesName: 'trailix_secure_prefs',
      preferencesKeyPrefix: 'trailix_',
      resetOnError: true, // üÜï Reset automatique en cas d'erreur
    ),
    iOptions: IOSOptions(
      accessibility: KeychainAccessibility.first_unlock_this_device,
      synchronizable: false, // üÜï √âviter la sync iCloud qui peut causer des conflits
    ),
  );
  
  // Cache des tokens pour √©viter les acc√®s r√©p√©t√©s
  static String? _cachedMapboxToken;
  static String? _cachedSupabaseUrl;
  static String? _cachedSupabaseAnonKey;
  static String? _cachedSupabaseServiceRoleKey;

  // üÜï Cache pour monitoring
  static String? _cachedSentryDsn;
  static String? _cachedSentryEnvironment;
  static String? _cachedSentryRelease;

  // üîí √âtat du stockage s√©curis√© avec retry
  static bool _secureStorageAvailable = true;
  static int _retryCount = 0;
  static const int _maxRetries = 3;

  // üîí Cl√©s pour le stockage s√©curis√© (avec pr√©fixe unique)
  static const String _keyAccessToken = 'trailix_supabase_access_token';
  static const String _keyRefreshToken = 'trailix_supabase_refresh_token';
  static const String _keyTokenExpiry = 'trailix_token_expiry';
  static const String _keyTokenRotationKey = 'trailix_token_rotation_key';

  static bool get isProduction => dotenv.env['ENVIRONMENT'] == 'production';
  static bool get isDevelopment => dotenv.env['ENVIRONMENT'] == 'development';

  static Duration get apiTimeout => Duration(
    seconds: int.tryParse(dotenv.env['API_TIMEOUT'] ?? '30') ?? 30,
  );

  /// üîí M√©thode helper pour √©criture s√©curis√©e avec gestion des conflits
  static Future<bool> _writeSecurely(String key, String value) async {
    try {
      // üÜï Suppression pr√©ventive pour √©viter l'erreur -25299
      try {
        await _secureStorage.delete(key: key);
      } catch (deleteError) {
        // Ignorer les erreurs de suppression
        LogConfig.logInfo('üîí Suppression pr√©ventive ignor√©e pour $key');
      }
      
      // √âcriture du nouveau value
      await _secureStorage.write(key: key, value: value);
      return true;
    } catch (e) {
      final errorCode = _extractErrorCode(e.toString());
      
      // üÜï Gestion sp√©cifique de l'erreur -25299 (duplicate item)
      if (errorCode == -25299) {
        LogConfig.logInfo('üîí Conflit keychain d√©tect√©, tentative de correction...');
        try {
          await _secureStorage.delete(key: key);
          await _secureStorage.write(key: key, value: value);
          LogConfig.logSuccess('üîí Conflit keychain r√©solu');
          return true;
        } catch (retryError) {
          LogConfig.logWarning('‚ö†Ô∏è Impossible de r√©soudre le conflit keychain: $retryError');
        }
      }
      
      LogConfig.logWarning('‚ö†Ô∏è Erreur √©criture s√©curis√©e pour $key: $e');
      return false;
    }
  }

  /// üÜï Extraction du code d'erreur depuis le message
  static int? _extractErrorCode(String errorMessage) {
    final regex = RegExp(r'Code:\s*(-?\d+)');
    final match = regex.firstMatch(errorMessage);
    return match != null ? int.tryParse(match.group(1)!) : null;
  }

  /// üÜï M√©thode de r√©cup√©ration automatique du stockage s√©curis√©
  static Future<void> _attemptStorageRecovery() async {
    if (_retryCount >= _maxRetries) {
      LogConfig.logWarning('‚ö†Ô∏è Nombre maximum de tentatives atteint, stockage s√©curis√© d√©sactiv√©');
      _secureStorageAvailable = false;
      return;
    }

    _retryCount++;
    LogConfig.logInfo('üîÑ Tentative de r√©cup√©ration du stockage s√©curis√© ($_retryCount/$_maxRetries)');
    
    final isAvailable = await isSecureStorageAvailable();
    if (isAvailable) {
      LogConfig.logSuccess('üîí Stockage s√©curis√© r√©cup√©r√© avec succ√®s');
      _retryCount = 0; // Reset compteur en cas de succ√®s
    }
  }

  /// üîí Stockage s√©curis√© du token d'acc√®s avec gestion am√©lior√©e des erreurs
  static Future<void> storeAccessToken(String token) async {
    if (!_secureStorageAvailable) {
      LogConfig.logInfo('üîí Stockage s√©curis√© d√©sactiv√©, token ignor√©');
      return;
    }

    final success = await _writeSecurely(_keyAccessToken, token);
    if (!success) {
      await _attemptStorageRecovery();
      return;
    }
      
    // Stocker l'heure d'expiration (JWT valide 1h par d√©faut)
    final expiry = DateTime.now().add(const Duration(hours: 1));
    final expirySuccess = await _writeSecurely(_keyTokenExpiry, expiry.toIso8601String());
    
    if (success && expirySuccess) {
      LogConfig.logInfo('üîí Token d\'acc√®s stock√© de fa√ßon s√©curis√©e');
    }
  }

  /// üîí R√©cup√©ration s√©curis√©e du token d'acc√®s avec gestion am√©lior√©e des erreurs
  static Future<String?> getStoredAccessToken() async {
    if (!_secureStorageAvailable) {
      return null;
    }

    try {
      final token = await _secureStorage.read(key: _keyAccessToken);
      if (token != null) {
        // üÜï Reset compteur de retry en cas de succ√®s
        _retryCount = 0;
      }
      return token;
    } catch (e) {
      LogConfig.logWarning('‚ö†Ô∏è Lecture token √©chou√©e: $e');
      await _attemptStorageRecovery();
      return null;
    }
  }

  /// üîí Stockage s√©curis√© du refresh token avec gestion am√©lior√©e des erreurs
  static Future<void> storeRefreshToken(String token) async {
    if (!_secureStorageAvailable) {
      LogConfig.logInfo('üîí Stockage s√©curis√© d√©sactiv√©, refresh token ignor√©');
      return;
    }

    final success = await _writeSecurely(_keyRefreshToken, token);
    if (success) {
      LogConfig.logInfo('üîí Refresh token stock√© de fa√ßon s√©curis√©e');
    } else {
      await _attemptStorageRecovery();
    }
  }

  /// üîí R√©cup√©ration s√©curis√©e du refresh token avec gestion am√©lior√©e des erreurs
  static Future<String?> getStoredRefreshToken() async {
    if (!_secureStorageAvailable) {
      return null;
    }

    try {
      final token = await _secureStorage.read(key: _keyRefreshToken);
      if (token != null) {
        _retryCount = 0;
      }
      return token;
    } catch (e) {
      LogConfig.logWarning('‚ö†Ô∏è Lecture refresh token √©chou√©e: $e');
      await _attemptStorageRecovery();
      return null;
    }
  }

  /// üîí Validation de l'expiration du token JWT avec gestion am√©lior√©e des erreurs
  static Future<bool> isTokenExpired() async {
    if (!_secureStorageAvailable) {
      return false; // Si pas de stockage, on consid√®re comme non expir√©
    }

    try {
      final expiryString = await _secureStorage.read(key: _keyTokenExpiry);
      if (expiryString == null) return false; // Pas d'info = pas expir√©
      
      final expiry = DateTime.parse(expiryString);
      final now = DateTime.now();
      
      // Consid√©rer expir√© si moins de 5 minutes avant expiration
      final isExpiring = now.isAfter(expiry.subtract(const Duration(minutes: 5)));
      
      if (isExpiring) {
        LogConfig.logInfo('‚ö†Ô∏è Token proche de l\'expiration');
      }
      
      return isExpiring;
    } catch (e) {
      LogConfig.logWarning('‚ö†Ô∏è Erreur v√©rification expiration token: $e');
      await _attemptStorageRecovery();
      return false; // En cas d'erreur, consid√©rer comme non expir√©
    }
  }

  /// üîí Validation du format JWT (am√©lior√©e)
  static bool isValidJWT(String token) {
    try {
      // Un JWT valide a 3 parties s√©par√©es par des points
      final parts = token.split('.');
      if (parts.length != 3) return false;
      
      // üÜï Validation plus robuste du header et payload
      try {
        final header = json.decode(
          utf8.decode(base64Url.decode(base64Url.normalize(parts[0]))),
        );
        
        // Le champ 'typ' est optionnel selon RFC 7519
        // S'il est pr√©sent, v√©rifier qu'il s'agit bien d'un JWT
        final typ = header['typ']?.toString().toLowerCase();
        if (typ != null && typ != 'jwt') {
          LogConfig.logWarning('‚ö†Ô∏è Type JWT invalide: $typ');
          return false;
        }
        
        // V√©rifier que le header contient au minimum un algorithme
        if (header['alg'] == null) {
          LogConfig.logWarning('‚ö†Ô∏è Algorithme JWT manquant');
          return false;
        }
        
        // Valider le payload (doit pouvoir √™tre d√©cod√©)
        try {
          final payload = json.decode(
            utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))),
          );
          
          // V√©rifier qu'il contient des champs JWT standards
          if (payload['iss'] == null && payload['sub'] == null && payload['aud'] == null) {
            LogConfig.logWarning('‚ö†Ô∏è Payload JWT ne contient aucun champ standard');
            return false;
          }
          
          return true;
        } catch (payloadError) {
          LogConfig.logWarning('‚ö†Ô∏è Payload JWT invalide: $payloadError');
          return false;
        }
        
      } catch (headerError) {
        LogConfig.logWarning('‚ö†Ô∏è Header JWT invalide: $headerError');
        return false;
      }
    } catch (e) {
      LogConfig.logWarning('‚ö†Ô∏è Token JWT invalide: $e');
      return false;
    }
  }

  /// üîí Extraction de l'expiration depuis le JWT (am√©lior√©e)
  static DateTime? getJWTExpiration(String token) {
    try {
      final parts = token.split('.');
      if (parts.length != 3) return null;
      
      final payload = json.decode(
        utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))),
      );
      
      final exp = payload['exp'];
      if (exp != null && exp is int) {
        return DateTime.fromMillisecondsSinceEpoch(exp * 1000);
      }
      
      return null;
    } catch (e) {
      LogConfig.logWarning('‚ö†Ô∏è Erreur extraction expiration JWT: $e');
      return null;
    }
  }

  /// üîí Nettoyage de tous les tokens stock√©s avec gestion am√©lior√©e des erreurs
  static Future<void> clearStoredTokens() async {
    if (!_secureStorageAvailable) {
      LogConfig.logInfo('üîí Stockage s√©curis√© d√©sactiv√©, nettoyage ignor√©');
      return;
    }

    final keys = [_keyAccessToken, _keyRefreshToken, _keyTokenExpiry, _keyTokenRotationKey];
    
    for (final key in keys) {
      try {
        await _secureStorage.delete(key: key);
      } catch (e) {
        LogConfig.logWarning('‚ö†Ô∏è Erreur suppression $key: $e');
      }
    }
    
    LogConfig.logInfo('üßπ Tokens nettoy√©s du stockage s√©curis√©');
  }

  /// üîí G√©n√©ration et stockage d'une cl√© de rotation avec gestion am√©lior√©e des erreurs
  static Future<void> generateRotationKey() async {
    if (!_secureStorageAvailable) {
      LogConfig.logInfo('üîí Stockage s√©curis√© d√©sactiv√©, cl√© rotation ignor√©e');
      return;
    }

    final key = base64Encode(List.generate(32, (i) => 
      DateTime.now().millisecondsSinceEpoch + i).map((e) => e % 256).toList());
    
    final success = await _writeSecurely(_keyTokenRotationKey, key);
    if (success) {
      LogConfig.logInfo('üîë Cl√© de rotation g√©n√©r√©e');
    } else {
      await _attemptStorageRecovery();
    }
  }

  /// üîí Validation de la s√©curit√© du stockage (am√©lior√©e)
  static Future<bool> isSecureStorageAvailable() async {
    try {
      // üÜï Utiliser une cl√© unique avec timestamp pour √©viter les collisions
      final testKey = 'trailix_test_${DateTime.now().millisecondsSinceEpoch}';
      const testValue = 'test_value';
            
      // üÜï Nettoyage agressif de toutes les anciennes cl√©s de test
      await _cleanupOldTestKeys();
      
      // Test d'√©criture/lecture
      await _secureStorage.write(key: testKey, value: testValue);
      final result = await _secureStorage.read(key: testKey);
      await _secureStorage.delete(key: testKey);
      
      final isAvailable = result == testValue;
      _secureStorageAvailable = isAvailable;
      
      if (isAvailable) {
        LogConfig.logSuccess('üîí Stockage s√©curis√© disponible et test√©');
      } else {
        LogConfig.logError('‚ùå Echec de stockage s√©curis√©');
      }
      
      return isAvailable;
    } catch (e) {
      LogConfig.logWarning('‚ö†Ô∏è Stockage s√©curis√© non disponible: $e');
      
      // üÜï En cas d'erreur -25299, essayer un nettoyage et un second test
      if (_extractErrorCode(e.toString()) == -25299) {
        try {
          await _performKeychainCleanup();
          
          // Second essai avec une nouvelle cl√©
          final retryKey = 'trailix_retry_${DateTime.now().millisecondsSinceEpoch}';
          await _secureStorage.write(key: retryKey, value: 'retry_test');
          final retryResult = await _secureStorage.read(key: retryKey);
          await _secureStorage.delete(key: retryKey);
          
          final isRetrySuccess = retryResult == 'retry_test';
          _secureStorageAvailable = isRetrySuccess;
          
          if (isRetrySuccess) {
            LogConfig.logSuccess('üîí Stockage s√©curis√© r√©cup√©r√© apr√®s nettoyage');
            return true;
          }
        } catch (cleanupError) {
          LogConfig.logError('‚ùå Echec du nettoyage: $cleanupError');
        }
      }
      
      _secureStorageAvailable = false;
      return false;
    }
  }

  /// üÜï Nettoyage des anciennes cl√©s de test
  static Future<void> _cleanupOldTestKeys() async {
    final oldTestPatterns = [
      'trailix_test_security',
      'test_security',
    ];
    
    for (final pattern in oldTestPatterns) {
      try {
        await _secureStorage.delete(key: pattern);
      } catch (e) {
        // Ignorer les erreurs de nettoyage
      }
    }
  }

  /// üÜï Nettoyage agressif du keychain pour les cl√©s Trailix
  static Future<void> _performKeychainCleanup() async {
    // Liste des cl√©s potentiellement probl√©matiques
    final keysToClean = [
      'trailix_test_security',
      'test_security',
      'trailix_supabase_access_token',
      'trailix_supabase_refresh_token', 
      'trailix_token_expiry',
      'trailix_token_rotation_key',
    ];
        
    for (final key in keysToClean) {
      try {
        await _secureStorage.delete(key: key);
        LogConfig.logInfo('üóëÔ∏è Supprim√©: $key');
      } catch (e) {
        // Ignorer les erreurs - la cl√© n'existe peut-√™tre pas
      }
      
      // Petite pause pour √©viter de surcharger le keychain
      await Future.delayed(const Duration(milliseconds: 10));
    }    
  }

  /// üÜï M√©thode publique pour forcer un nettoyage complet (utile pour debug)
  static Future<void> forceKeychainCleanup() async {
    await _performKeychainCleanup();
    // Retester apr√®s nettoyage
    await isSecureStorageAvailable();
  }

  static String get apiBaseUrl {
    final String? baseUrl = dotenv.env['API_BASE_URL'];
    
    if (baseUrl == null || baseUrl.isEmpty) {
      throw Exception('API_BASE_URL must be configured in .env file');
    }
    
    // Validation de l'URL
    if (!Uri.tryParse(baseUrl)!.isAbsolute) {
      throw Exception('API_BASE_URL must be a valid absolute URL');
    }
    
    return baseUrl.endsWith('/') ? baseUrl.substring(0, baseUrl.length - 1) : baseUrl;
  }

  /// Token Mapbox avec fallback production/d√©veloppement
  static String get mapboxToken {
    if (_cachedMapboxToken != null) return _cachedMapboxToken!;
    
    String? token;
    if (kIsProduction) {
      token = const String.fromEnvironment('MAPBOX_TOKEN_PROD');
      if (token.isEmpty) {
        token = dotenv.env['MAPBOX_TOKEN_PROD'];
      }
    } else {
      token = const String.fromEnvironment('MAPBOX_TOKEN_DEV');
      if (token.isEmpty) {
        token = dotenv.env['MAPBOX_TOKEN_DEV'] ?? dotenv.env['MAPBOX_TOKEN'];
      }
    }
    
    if (token == null || token.isEmpty) {
      throw Exception('MAPBOX_TOKEN non configur√© pour l\'environnement ${kIsProduction ? 'PRODUCTION' : 'DEVELOPMENT'}');
    }
    
    // Validation basique du format Mapbox (commence par pk.)
    if (!token.startsWith('pk.')) {
      throw Exception('Token Mapbox invalide: doit commencer par "pk."');
    }
    
    _cachedMapboxToken = token;
    return token;
  }

  /// URL Supabase s√©curis√©e
  static String get supabaseUrl {
    if (_cachedSupabaseUrl != null) return _cachedSupabaseUrl!;
    
    String? url;
    if (kIsProduction) {
      url = const String.fromEnvironment('SUPABASE_URL_PROD');
      if (url.isEmpty) {
        url = dotenv.env['SUPABASE_URL_PROD'];
      }
    } else {
      url = const String.fromEnvironment('SUPABASE_URL_DEV');
      if (url.isEmpty) {
        url = dotenv.env['SUPABASE_URL_DEV'] ?? dotenv.env['SUPABASE_URL'];
      }
    }
    
    if (url == null || url.isEmpty) {
      throw Exception('SUPABASE_URL non configur√© pour l\'environnement ${kIsProduction ? 'PRODUCTION' : 'DEVELOPMENT'}');
    }
    
    // Validation de l'URL Supabase
    final uri = Uri.tryParse(url);
    if (uri == null || !uri.isAbsolute || !url.contains('supabase')) {
      throw Exception('URL Supabase invalide: $url');
    }
    
    _cachedSupabaseUrl = url;
    return url;
  }

  /// Cl√© anonyme Supabase s√©curis√©e
  static String get supabaseAnonKey {
    if (_cachedSupabaseAnonKey != null) return _cachedSupabaseAnonKey!;
    
    String? key;
    if (kIsProduction) {
      key = const String.fromEnvironment('SUPABASE_ANON_KEY_PROD');
      if (key.isEmpty) {
        key = dotenv.env['SUPABASE_ANON_KEY_PROD'];
      }
    } else {
      key = const String.fromEnvironment('SUPABASE_ANON_KEY_DEV');
      if (key.isEmpty) {
        key = dotenv.env['SUPABASE_ANON_KEY_DEV'] ?? dotenv.env['SUPABASE_ANON_KEY'];
      }
    }
    
    if (key == null || key.isEmpty) {
      throw Exception('SUPABASE_ANON_KEY non configur√© pour l\'environnement ${kIsProduction ? 'PRODUCTION' : 'DEVELOPMENT'}');
    }
    
    // Validation basique de la cl√© Supabase (format JWT)
    if (!key.startsWith('eyJ')) {
      throw Exception('Cl√© Supabase anonyme invalide: doit √™tre un JWT');
    }
    
    _cachedSupabaseAnonKey = key;
    return key;
  }

  static String get supabaseServiceRoleKey {
    if (_cachedSupabaseServiceRoleKey != null) return _cachedSupabaseServiceRoleKey!;
    
    String? key;
    if (kIsProduction) {
      key = const String.fromEnvironment('SUPABASE_SERVICE_ROLE_KEY_PROD');
      if (key.isEmpty) {
        key = dotenv.env['SUPABASE_SERVICE_ROLE_KEY_PROD'];
      }
    } else {
      key = const String.fromEnvironment('SUPABASE_SERVICE_ROLE_KEY_DEV');
      if (key.isEmpty) {
        key = dotenv.env['SUPABASE_SERVICE_ROLE_KEY_DEV'] ?? dotenv.env['SUPABASE_SERVICE_ROLE_KEY'];
      }
    }
    
    if (key == null || key.isEmpty) {
      throw Exception('SUPABASE_SERVICE_ROLE_KEY non configur√© pour l\'environnement ${kIsProduction ? 'PRODUCTION' : 'DEVELOPMENT'}');
    }
    
    // Validation basique de la cl√© Supabase (format JWT)
    if (!key.startsWith('eyJ')) {
      throw Exception('Cl√© Supabase anonyme invalide: doit √™tre un JWT');
    }
    
    _cachedSupabaseServiceRoleKey = key;
    return key;
  }

  /// Identifiants Google avec validation
  static String get googleWebClientId {
    String? clientId;
    if (kIsProduction) {
      clientId = const String.fromEnvironment('WEB_CLIENT_ID_PROD');
      if (clientId.isEmpty) {
        clientId = dotenv.env['WEB_CLIENT_ID_PROD'];
      }
    } else {
      clientId = const String.fromEnvironment('WEB_CLIENT_ID_DEV');
      if (clientId.isEmpty) {
        clientId = dotenv.env['WEB_CLIENT_ID_DEV'] ?? dotenv.env['WEB_CLIENT_ID'];
      }
    }
    
    if (clientId == null || clientId.isEmpty) {
      throw Exception('WEB_CLIENT_ID non configur√©');
    }
    
    if (!clientId.endsWith('.googleusercontent.com')) {
      throw Exception('WEB_CLIENT_ID invalide: doit se terminer par .googleusercontent.com');
    }
    
    return clientId;
  }

  static String get googleIosClientId {
    String? clientId;
    if (kIsProduction) {
      clientId = const String.fromEnvironment('IOS_CLIENT_ID_PROD');
      if (clientId.isEmpty) {
        clientId = dotenv.env['IOS_CLIENT_ID_PROD'];
      }
    } else {
      clientId = const String.fromEnvironment('IOS_CLIENT_ID_DEV');
      if (clientId.isEmpty) {
        clientId = dotenv.env['IOS_CLIENT_ID_DEV'] ?? dotenv.env['IOS_CLIENT_ID'];
      }
    }
    
    if (clientId == null || clientId.isEmpty) {
      throw Exception('IOS_CLIENT_ID non configur√©');
    }
    
    if (!clientId.endsWith('.googleusercontent.com')) {
      throw Exception('IOS_CLIENT_ID invalide: doit se terminer par .googleusercontent.com');
    }
    
    return clientId;
  }

  // DSN Sentry avec fallback production/d√©veloppement
  static String get sentryDsn {
    if (_cachedSentryDsn != null) return _cachedSentryDsn!;
    
    String? dsn;
    if (kIsProduction) {
      dsn = const String.fromEnvironment('SENTRY_DSN_PROD');
      if (dsn.isEmpty) {
        dsn = dotenv.env['SENTRY_DSN_PROD'];
      }
    } else {
      dsn = const String.fromEnvironment('SENTRY_DSN_DEV');
      if (dsn.isEmpty) {
        dsn = dotenv.env['SENTRY_DSN_DEV'] ?? dotenv.env['SENTRY_DSN'];
      }
    }
    
    if (dsn == null || dsn.isEmpty) {
      throw Exception('SENTRY_DSN non configur√© pour l\'environnement ${kIsProduction ? 'PRODUCTION' : 'DEVELOPMENT'}');
    }
    
    // Validation basique du DSN Sentry
    final uri = Uri.tryParse(dsn);
    if (uri == null || !uri.isAbsolute) {
      throw Exception('DSN Sentry invalide: $dsn');
    }
    
    _cachedSentryDsn = dsn;
    return dsn;
  }

  static String get sentryEnvironment {
    if (_cachedSentryEnvironment != null) return _cachedSentryEnvironment!;
    
    final env = kIsProduction 
        ? (dotenv.env['SENTRY_ENVIRONMENT_PROD'] ?? 'production')
        : (dotenv.env['SENTRY_ENVIRONMENT_DEV'] ?? 'development');
    
    _cachedSentryEnvironment = env;
    return env;
  }

  static String get sentryRelease {
    if (_cachedSentryRelease != null) return _cachedSentryRelease!;
    
    // Version par d√©faut si non sp√©cifi√©e
    final release = dotenv.env['SENTRY_RELEASE'] ?? 'trailix@1.0.0';
    
    _cachedSentryRelease = release;
    return release;
  }

  // ===== üÜï MONITORING SETTINGS =====

  /// Activer le crash reporting
  static bool get isCrashReportingEnabled {
    return dotenv.env['ENABLE_CRASH_REPORTING']?.toLowerCase() == 'true';
  }

  /// Activer le monitoring des performances
  static bool get isPerformanceMonitoringEnabled {
    return dotenv.env['ENABLE_PERFORMANCE_MONITORING']?.toLowerCase() == 'true';
  }

  /// Taux d'√©chantillonnage pour Sentry (0.0 √† 1.0)
  static double get sentrySampleRate {
    return double.tryParse(dotenv.env['SENTRY_SAMPLE_RATE'] ?? '1.0') ?? 1.0;
  }

  /// Taux d'√©chantillonnage pour les traces de performance (0.0 √† 1.0)
  static double get sentryTracesSampleRate {
    return double.tryParse(dotenv.env['SENTRY_TRACES_SAMPLE_RATE'] ?? '0.1') ?? 0.1;
  }

  // ===== üÜï LOGGING SETTINGS =====

  /// Niveau de log selon l'environnement
  static String get logLevel {
    if (kIsProduction) {
      return dotenv.env['LOG_LEVEL_PROD'] ?? 'error';
    } else {
      return dotenv.env['LOG_LEVEL_DEV'] ?? 'debug';
    }
  }

  /// Activer les logs dans Supabase
  static bool get isSupabaseLoggingEnabled {
    return dotenv.env['ENABLE_SUPABASE_LOGGING']?.toLowerCase() == 'true';
  }

  /// Dur√©e de r√©tention des logs (en jours)
  static int get logRetentionDays {
    return int.tryParse(dotenv.env['LOG_RETENTION_DAYS'] ?? '30') ?? 30;
  }

  /// üîí Validation compl√®te incluant s√©curit√© avec gestion am√©lior√©e des erreurs
  static Future<void> validateConfiguration() async {
    try {
      LogConfig.logInfo('üîí Validation configuration s√©curis√©e...');
      LogConfig.logInfo('üîí Mode: ${kIsProduction ? 'PRODUCTION' : 'DEVELOPMENT'}');
      
      // V√©rifier la disponibilit√© du stockage s√©curis√© avec retry automatique
      final isSecureStorageOk = await isSecureStorageAvailable();
      if (!isSecureStorageOk) {
        LogConfig.logWarning('‚ö†Ô∏è Stockage s√©curis√© non disponible, fonctionnement en mode d√©grad√©');
        _secureStorageAvailable = false;
      } else {
        LogConfig.logSuccess('üîí Stockage s√©curis√© disponible et valid√©');
        _retryCount = 0; // Reset en cas de succ√®s
      }
      
      // Valider la configuration monitoring
      if (isCrashReportingEnabled || isPerformanceMonitoringEnabled) {
        LogConfig.logSuccess('Configuration Sentry valid√©e');
      }
      
      LogConfig.logSuccess('Configuration compl√®te valid√©e');
    } catch (e) {
      LogConfig.logError('‚ùå Erreur configuration: $e');
      rethrow;
    }
  }

  /// üîí Nettoie le cache (inclut monitoring et tokens) avec gestion am√©lior√©e des erreurs
  static Future<void> clearCache() async {
    // Cache existant
    _cachedMapboxToken = null;
    _cachedSupabaseUrl = null;
    _cachedSupabaseAnonKey = null;
    
    // Cache monitoring
    _cachedSentryDsn = null;
    _cachedSentryEnvironment = null;
    _cachedSentryRelease = null;
    
    // üîí Reset du syst√®me de retry
    _retryCount = 0;
    _secureStorageAvailable = true;
    
    // üîí Nettoyer aussi les tokens stock√©s (avec gestion d'erreurs)
    await clearStoredTokens();
  }

  /// üÜï M√©thode publique pour forcer une v√©rification du stockage s√©curis√©
  static Future<bool> checkSecureStorageHealth() async {
    LogConfig.logInfo('üîç V√©rification sant√© du stockage s√©curis√©...');
    
    final isHealthy = await isSecureStorageAvailable();
    if (isHealthy) {
      LogConfig.logSuccess('‚úÖ Stockage s√©curis√© en bonne sant√©');
      _retryCount = 0;
    } else {
      LogConfig.logWarning('‚ö†Ô∏è Probl√®me d√©tect√© avec le stockage s√©curis√©');
      await _attemptStorageRecovery();
    }
    
    return isHealthy;
  }

  static void validate() {
    try {
      apiBaseUrl; // D√©clenche la validation
      LogConfig.logInfo('Configuration environment');
    } catch (e) {
      LogConfig.logError('‚ùå Erreur configuration: $e');
      rethrow;
    }
  }
}