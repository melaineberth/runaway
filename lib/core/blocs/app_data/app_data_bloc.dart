import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:runaway/core/services/screenshot_service.dart';
import 'package:runaway/features/activity/data/repositories/activity_repository.dart';
import 'package:runaway/features/route_generator/data/repositories/routes_repository.dart';
import 'package:runaway/features/activity/domain/models/activity_stats.dart';
import 'package:runaway/features/route_generator/domain/models/saved_route.dart';
import 'app_data_event.dart';
import 'app_data_state.dart';

/// BLoC principal pour orchestrer le pr√©-chargement et la gestion des donn√©es de l'application
class AppDataBloc extends Bloc<AppDataEvent, AppDataState> {
  final ActivityRepository _activityRepository;
  final RoutesRepository _routesRepository;
  
  // Cache avec expiration optimis√©
  static const Duration _cacheExpiration = Duration(minutes: 30);
  DateTime? _lastCacheUpdate;
  DateTime? _lastActivityUpdate;
  DateTime? _lastHistoricUpdate;
  
  // üõ°Ô∏è Protection contre les synchronisations multiples
  bool _isActivitySyncInProgress = false;
  bool _isHistoricSyncInProgress = false;
  bool _isFullSyncInProgress = false;
  
  // üïí Timing pour √©viter les appels trop fr√©quents
  static const Duration _minSyncInterval = Duration(seconds: 5);
  DateTime? _lastActivitySync;
  DateTime? _lastHistoricSync;
  DateTime? _lastFullSync;

  AppDataBloc({
    required ActivityRepository activityRepository,
    required RoutesRepository routesRepository,
  })  : _activityRepository = activityRepository,
        _routesRepository = routesRepository,
        super(const AppDataState()) {
    on<AppDataPreloadRequested>(_onPreloadRequested);
    on<AppDataRefreshRequested>(_onRefreshRequested);
    on<AppDataClearRequested>(_onClearRequested);
    on<ActivityDataRefreshRequested>(_onActivityDataRefresh);
    on<HistoricDataRefreshRequested>(_onHistoricDataRefresh);
    on<RouteAddedDataSync>(_onRouteAddedSync);
    on<RouteDeletedDataSync>(_onRouteDeletedSync);
    on<ForceDataSyncRequested>(_onForceDataSync);

    // Handlers d'objectifs
    on<PersonalGoalAddedToAppData>(_onGoalAdded);
    on<PersonalGoalUpdatedInAppData>(_onGoalUpdated);
    on<PersonalGoalDeletedFromAppData>(_onGoalDeleted);
    on<PersonalGoalsResetInAppData>(_onGoalsReset);

    // Handlers pour les parcours
    on<SavedRouteAddedToAppData>(_onRouteAdded);
    on<SavedRouteDeletedFromAppData>(_onRouteDeleted);
    on<SavedRouteUsageUpdatedInAppData>(_onRouteUsageUpdated);
  }

  Future<void> _onRouteAdded(
    SavedRouteAddedToAppData event,
    Emitter<AppDataState> emit,
  ) async {
    print('üöó Sauvegarde de parcours via AppDataBloc: ${event.name}');

    // 0Ô∏è‚É£ ‚Üí signale le d√©but
    emit(state.copyWith(isSavingRoute: true));
    
    try {
      // 1. üì∏ Capturer le screenshot de la carte
      String? screenshotUrl;
      try {
        print('üì∏ Capture du screenshot...');
        screenshotUrl = await ScreenshotService.captureAndUploadMapSnapshot(
          liveMap: event.map,
          routeCoords: event.coordinates,
          routeId: 'temp_${DateTime.now().millisecondsSinceEpoch}',
          userId: 'temp_user',
        );

        if (screenshotUrl != null) {
          print('‚úÖ Screenshot captur√© avec succ√®s: $screenshotUrl');
        } else {
          print('‚ö†Ô∏è Screenshot non captur√©, sauvegarde sans image');
        }
      } catch (screenshotError) {
        print('‚ùå Erreur capture screenshot: $screenshotError');
        screenshotUrl = null;
      }

      // 2. üíæ Sauvegarder le parcours avec l'URL de l'image
      final savedRoute = await _routesRepository.saveRoute(
        name: event.name,
        parameters: event.parameters,
        coordinates: event.coordinates,
        actualDistance: event.actualDistance,
        estimatedDuration: event.estimatedDuration,
        imageUrl: screenshotUrl,
      );

      // 3. üîÑ Recharger les donn√©es d'historique pour mettre √† jour l'interface
      await _refreshHistoricData(emit, showLoading: false);
      
      // 3Ô∏è‚É£ ‚Üí fin OK
      emit(state.copyWith(isSavingRoute: false));
      
      print('‚úÖ Parcours sauvegard√© avec succ√®s: ${savedRoute.name}');
    } catch (e) {
      print('‚ùå Erreur lors de la sauvegarde du parcours: $e');
      emit(state.copyWith(
        lastError: 'Erreur lors de la sauvegarde du parcours: $e',
      ));
    }
  }

  Future<void> _onRouteDeleted(
    SavedRouteDeletedFromAppData event,
    Emitter<AppDataState> emit,
  ) async {
    print('üóëÔ∏è Suppression de parcours via AppDataBloc: ${event.routeId}');
    
    try {
      // Supprimer le parcours
      await _routesRepository.deleteRoute(event.routeId);
      
      // Recharger les donn√©es d'historique
      await _refreshHistoricData(emit, showLoading: false);
      
      print('‚úÖ Parcours supprim√© avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur lors de la suppression du parcours: $e');
      emit(state.copyWith(
        lastError: 'Erreur lors de la suppression du parcours: $e',
      ));
    }
  }

  Future<void> _onRouteUsageUpdated(
    SavedRouteUsageUpdatedInAppData event,
    Emitter<AppDataState> emit,
  ) async {
    print('üìä Mise √† jour statistiques d\'utilisation: ${event.routeId}');
    
    try {
      // Mettre √† jour les statistiques d'utilisation
      await _routesRepository.updateRouteUsage(event.routeId);
      
      // Recharger les donn√©es d'historique (sans loading)
      await _refreshHistoricData(emit, showLoading: false);
      
      print('‚úÖ Statistiques d\'utilisation mises √† jour');
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour des statistiques: $e');
      emit(state.copyWith(
        lastError: 'Erreur lors de la mise √† jour des statistiques: $e',
      ));
    }
  }

  Future<void> _refreshHistoricData(Emitter<AppDataState> emit, {bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(isLoading: true));
    }

    try {
      final historicData = await _loadHistoricData();
      
      if (historicData != null) {
        _lastHistoricUpdate = DateTime.now();
        emit(state.copyWith(
          savedRoutes: historicData,
          isLoading: false,
          lastError: null,
        ));
        
        // Aussi rafra√Æchir les stats d'activit√© car elles d√©pendent des parcours
        await _refreshActivityData(emit, showLoading: false);
      }
    } catch (e) {
      emit(state.copyWith(
        isLoading: false,
        lastError: 'Erreur lors du rafra√Æchissement: $e',
      ));
    }
  }

  /// Pr√©-charge toutes les donn√©es n√©cessaires
  Future<void> _onPreloadRequested(
    AppDataPreloadRequested event,
    Emitter<AppDataState> emit,
  ) async {
    print('üöÄ D√©but pr√©-chargement des donn√©es...');
    
    // √âviter les appels multiples pendant un preload
    if (_isFullSyncInProgress) {
      print('‚è≥ Preload d√©j√† en cours, ignor√©');
      return;
    }
    
    // V√©rifier si les donn√©es sont encore valides dans le cache
    if (_isCacheValid() && _hasCompleteData()) {
      print('‚úÖ Donn√©es en cache valides, pas de rechargement n√©cessaire');
      return;
    }

    _isFullSyncInProgress = true;
    
    emit(state.copyWith(
      isLoading: true,
      lastError: null,
    ));

    try {
      // Charger les donn√©es en parall√®le
      final futures = <Future>[
        _loadActivityData(),
        _loadHistoricData(),
      ];

      final results = await Future.wait(futures, eagerError: false);
      
      final activityData = results[0] as ActivityDataResult?;
      final historicData = results[1] as List<SavedRoute>?;

      // Mettre √† jour le cache
      final now = DateTime.now();
      _lastCacheUpdate = now;
      _lastActivityUpdate = now;
      _lastHistoricUpdate = now;
      _lastFullSync = now;

      emit(state.copyWith(
        isLoading: false,
        isDataLoaded: true,
        // Donn√©es d'activit√©
        activityStats: activityData?.generalStats,
        activityTypeStats: activityData?.typeStats,
        periodStats: activityData?.periodStats,
        personalGoals: activityData?.goals,
        personalRecords: activityData?.records,
        // Donn√©es d'historique
        savedRoutes: historicData ?? [],
        lastCacheUpdate: _lastCacheUpdate,
      ));

      print('‚úÖ Pr√©-chargement termin√© avec succ√®s');
      
    } catch (e) {
      print('‚ùå Erreur lors du pr√©-chargement: $e');
      emit(state.copyWith(
        isLoading: false,
        lastError: 'Erreur lors du chargement: ${e.toString()}',
      ));
    } finally {
      _isFullSyncInProgress = false;
    }
  }

  /// Rafra√Æchit toutes les donn√©es avec protection contre les doublons
  Future<void> _onRefreshRequested(
    AppDataRefreshRequested event,
    Emitter<AppDataState> emit,
  ) async {
    // üõ°Ô∏è Protection contre les appels trop fr√©quents
    if (_isFullSyncInProgress) {
      print('‚ö†Ô∏è Sync compl√®te d√©j√† en cours, ignor√©e');
      return;
    }
    
    if (_lastFullSync != null && 
        DateTime.now().difference(_lastFullSync!) < _minSyncInterval) {
      print('‚ö†Ô∏è Sync compl√®te trop r√©cente, ignor√©e');
      return;
    }
    
    print('üîÑ Rafra√Æchissement des donn√©es demand√©');
    _lastCacheUpdate = null; // Forcer le rechargement
    add(const AppDataPreloadRequested());
  }

  /// üÜï Rafra√Æchissement optimis√© des donn√©es d'activit√©
  Future<void> _onActivityDataRefresh(
    ActivityDataRefreshRequested event,
    Emitter<AppDataState> emit,
  ) async {
    // üõ°Ô∏è Protection contre les appels multiples
    if (_isActivitySyncInProgress) {
      print('‚ö†Ô∏è Sync activit√© d√©j√† en cours, ignor√©e');
      return;
    }
    
    if (_lastActivitySync != null && 
        DateTime.now().difference(_lastActivitySync!) < _minSyncInterval) {
      print('‚ö†Ô∏è Sync activit√© trop r√©cente, ignor√©e');
      return;
    }

    _isActivitySyncInProgress = true;
    _lastActivitySync = DateTime.now();
    
    try {
      print('üìä Rafra√Æchissement donn√©es activit√©...');
      
      final activityData = await _loadActivityData();
      if (activityData != null) {
        _lastActivityUpdate = DateTime.now();
        emit(state.copyWith(
          activityStats: activityData.generalStats,
          activityTypeStats: activityData.typeStats,
          periodStats: activityData.periodStats,
          personalGoals: activityData.goals,
          personalRecords: activityData.records,
          lastCacheUpdate: _lastActivityUpdate,
        ));
        print('‚úÖ Donn√©es activit√© mises √† jour');
      }
    } catch (e) {
      print('‚ùå Erreur rafra√Æchissement activit√©: $e');
    } finally {
      _isActivitySyncInProgress = false;
    }
  }

  /// üÜï Rafra√Æchissement optimis√© des donn√©es d'historique
  Future<void> _onHistoricDataRefresh(
    HistoricDataRefreshRequested event,
    Emitter<AppDataState> emit,
  ) async {
    // üõ°Ô∏è Protection contre les appels multiples
    if (_isHistoricSyncInProgress) {
      print('‚ö†Ô∏è Sync historique d√©j√† en cours, ignor√©e');
      return;
    }
    
    if (_lastHistoricSync != null && 
        DateTime.now().difference(_lastHistoricSync!) < _minSyncInterval) {
      print('‚ö†Ô∏è Sync historique trop r√©cente, ignor√©e');
      return;
    }

    _isHistoricSyncInProgress = true;
    _lastHistoricSync = DateTime.now();
    
    try {
      print('üìö Rafra√Æchissement historique...');
      
      final historicData = await _loadHistoricData();
      if (historicData != null) {
        _lastHistoricUpdate = DateTime.now();
        emit(state.copyWith(
          savedRoutes: historicData,
          lastCacheUpdate: _lastHistoricUpdate,
        ));
        print('‚úÖ Historique mis √† jour (${historicData.length} routes)');
      }
    } catch (e) {
      print('‚ùå Erreur rafra√Æchissement historique: $e');
    } finally {
      _isHistoricSyncInProgress = false;
    }
  }

  /// üÜï Synchronisation optimis√©e lors d'ajout de route
  Future<void> _onRouteAddedSync(
    RouteAddedDataSync event,
    Emitter<AppDataState> emit,
  ) async {
    print('‚ûï Sync optimis√©e - Route ajout√©e: ${event.routeName}');
    
    if (!_isActivitySyncInProgress) {
      await _onActivityDataRefresh(const ActivityDataRefreshRequested(), emit);
    } else {
      print('‚ö†Ô∏è Sync activit√© d√©j√† en cours pour ajout route');
    }
  }

  /// üÜï Synchronisation optimis√©e lors de suppression de route
  Future<void> _onRouteDeletedSync(
    RouteDeletedDataSync event,
    Emitter<AppDataState> emit,
  ) async {
    print('Sync optimis√©e ‚Äì Route supprim√©e : ${event.routeName}');

    // √âviter de lancer une deuxi√®me sync si l‚Äôune est d√©j√† en cours
    if (_isHistoricSyncInProgress || _isActivitySyncInProgress) {
      print('‚ö†Ô∏è Sync d√©j√† en cours pour suppression de route');
      return;
    }

    try {
      // On attend la fin des deux t√¢ches AVANT de sortir du handler
      await Future.wait<void>([
        _performSafeHistoricSync(emit),
        _performSafeActivitySync(emit),
      ]);
    } catch (e, st) {
      // On capture l‚Äôerreur proprement ; on peut aussi √©mettre un √©tat d‚Äôerreur ici
      print('‚ùå Erreur sync suppression : $e\n$st');
      // emit(ErrorState(message: e.toString()));
    }
  }

  /// üÜï Synchronisation forc√©e avec nettoyage complet
  Future<void> _onForceDataSync(
    ForceDataSyncRequested event,
    Emitter<AppDataState> emit,
  ) async {
    print('üîÑ Synchronisation forc√©e des donn√©es');
    
    // Nettoyer tous les verrous et timestamps
    _isActivitySyncInProgress = false;
    _isHistoricSyncInProgress = false;
    _isFullSyncInProgress = false;
    _lastActivitySync = null;
    _lastHistoricSync = null;
    _lastFullSync = null;
    
    // Forcer le rechargement complet en ignorant le cache
    _lastCacheUpdate = null;
    add(const AppDataPreloadRequested());
  }

  /// üõ°Ô∏è Sync s√©curis√©e de l'historique
  Future<void> _performSafeHistoricSync(Emitter<AppDataState> emit) async {
    if (_isHistoricSyncInProgress) return;
    
    _isHistoricSyncInProgress = true;
    try {
      final historicData = await _loadHistoricData();
      if (historicData != null) {
        _lastHistoricUpdate = DateTime.now();
        emit(state.copyWith(
          savedRoutes: historicData,
          lastCacheUpdate: _lastHistoricUpdate,
        ));
        print('‚úÖ Sync historique s√©curis√©e termin√©e');
      }
    } finally {
      _isHistoricSyncInProgress = false;
    }
  }

  /// üõ°Ô∏è Sync s√©curis√©e des activit√©s
  Future<void> _performSafeActivitySync(Emitter<AppDataState> emit) async {
    if (_isActivitySyncInProgress) return;
    
    _isActivitySyncInProgress = true;
    try {
      final activityData = await _loadActivityData();
      if (activityData != null) {
        _lastActivityUpdate = DateTime.now();
        emit(state.copyWith(
          activityStats: activityData.generalStats,
          activityTypeStats: activityData.typeStats,
          periodStats: activityData.periodStats,
          personalGoals: activityData.goals,
          personalRecords: activityData.records,
          lastCacheUpdate: _lastActivityUpdate,
        ));
        print('‚úÖ Sync activit√© s√©curis√©e termin√©e');
      }
    } finally {
      _isActivitySyncInProgress = false;
    }
  }

  /// Vide le cache et remet √† z√©ro
  Future<void> _onClearRequested(
    AppDataClearRequested event,
    Emitter<AppDataState> emit,
  ) async {
    print('üóëÔ∏è Nettoyage du cache des donn√©es');
    
    // Nettoyer tous les timestamps et verrous
    _lastCacheUpdate = null;
    _lastActivityUpdate = null;
    _lastHistoricUpdate = null;
    _lastActivitySync = null;
    _lastHistoricSync = null;
    _lastFullSync = null;
    _isActivitySyncInProgress = false;
    _isHistoricSyncInProgress = false;
    _isFullSyncInProgress = false;
    
    emit(const AppDataState());
  }

  /// Charge les donn√©es d'activit√© (inchang√©)
  Future<ActivityDataResult?> _loadActivityData() async {
    try {
      print('üìä Chargement des donn√©es d\'activit√©...');
      
      // Charger tous les parcours pour calculer les stats
      final routes = await _routesRepository.getUserRoutes();
      
      // Calculer les statistiques en parall√®le
      final statsFutures = await Future.wait([
        _activityRepository.getActivityStats(routes),
        _activityRepository.getActivityTypeStats(routes),
        _activityRepository.getPeriodStats(routes, PeriodType.monthly),
        _activityRepository.getPersonalGoals(),
        _activityRepository.getPersonalRecords(),
      ]);

      return ActivityDataResult(
        generalStats: statsFutures[0] as ActivityStats,
        typeStats: statsFutures[1] as List<ActivityTypeStats>,
        periodStats: statsFutures[2] as List<PeriodStats>,
        goals: statsFutures[3] as List<PersonalGoal>,
        records: statsFutures[4] as List<PersonalRecord>,
      );
      
    } catch (e) {
      print('‚ùå Erreur chargement donn√©es activit√©: $e');
      return null;
    }
  }

  /// Charge les donn√©es d'historique (inchang√©)
  Future<List<SavedRoute>?> _loadHistoricData() async {
    try {
      print('üìö Chargement de l\'historique...');
      return await _routesRepository.getUserRoutes();
    } catch (e) {
      print('‚ùå Erreur chargement historique: $e');
      return null;
    }
  }

  Future<void> _onGoalAdded(
    PersonalGoalAddedToAppData event,
    Emitter<AppDataState> emit,
  ) async {
    print('üéØ Ajout d\'objectif via AppDataBloc: ${event.goal.title}');
    
    try {      
      // Recharger les donn√©es d'activit√© pour mettre √† jour l'interface
      await _refreshActivityData(emit, showLoading: false);
      
      print('‚úÖ Objectif ajout√© avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur lors de l\'ajout de l\'objectif: $e');
      emit(state.copyWith(
        lastError: 'Erreur lors de l\'ajout de l\'objectif: $e',
      ));
    }
  }

  Future<void> _onGoalUpdated(
    PersonalGoalUpdatedInAppData event,
    Emitter<AppDataState> emit,
  ) async {
    print('üéØ Mise √† jour d\'objectif via AppDataBloc: ${event.goal.title}');
    
    try {      
      // Recharger les donn√©es d'activit√©
      await _refreshActivityData(emit, showLoading: false);
      
      print('‚úÖ Objectif mis √† jour avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour de l\'objectif: $e');
      emit(state.copyWith(
        lastError: 'Erreur lors de la mise √† jour de l\'objectif: $e',
      ));
    }
  }

  Future<void> _onGoalDeleted(
    PersonalGoalDeletedFromAppData event,
    Emitter<AppDataState> emit,
  ) async {
    print('üéØ Suppression d\'objectif via AppDataBloc: ${event.goalId}');
    
    try {
      // Supprimer l'objectif
      await _activityRepository.deletePersonalGoal(event.goalId);
      
      // Recharger les donn√©es d'activit√©
      await _refreshActivityData(emit, showLoading: false);
      
      print('‚úÖ Objectif supprim√© avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur lors de la suppression de l\'objectif: $e');
      emit(state.copyWith(
        lastError: 'Erreur lors de la suppression de l\'objectif: $e',
      ));
    }
  }

  Future<void> _onGoalsReset(
    PersonalGoalsResetInAppData event,
    Emitter<AppDataState> emit,
  ) async {
    print('üéØ R√©initialisation de tous les objectifs via AppDataBloc');
    
    try {
      // R√©cup√©rer tous les objectifs existants
      final existingGoals = await _activityRepository.getPersonalGoals();
      
      // Supprimer chaque objectif
      for (final goal in existingGoals) {
        await _activityRepository.deletePersonalGoal(goal.id);
      }
      
      // Recharger les donn√©es d'activit√©
      await _refreshActivityData(emit, showLoading: false);
      
      print('‚úÖ Tous les objectifs r√©initialis√©s avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur lors de la r√©initialisation des objectifs: $e');
      emit(state.copyWith(
        lastError: 'Erreur lors de la r√©initialisation des objectifs: $e',
      ));
    }
  }

  Future<void> _refreshActivityData(Emitter<AppDataState> emit, {bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(isLoading: true));
    }

    try {
      final activityData = await _loadActivityData();
      
      if (activityData != null) {
        _lastActivityUpdate = DateTime.now();
        emit(state.copyWith(
          activityStats: activityData.generalStats,
          activityTypeStats: activityData.typeStats,
          periodStats: activityData.periodStats,
          personalGoals: activityData.goals,
          personalRecords: activityData.records,
          isLoading: false,
          lastError: null,
        ));
      }
    } catch (e) {
      emit(state.copyWith(
        isLoading: false,
        lastError: 'Erreur lors du rafra√Æchissement: $e',
      ));
    }
  }

  /// V√©rifie si le cache est encore valide
  bool _isCacheValid() {
    if (_lastCacheUpdate == null) return false;
    return DateTime.now().difference(_lastCacheUpdate!) < _cacheExpiration;
  }

  /// V√©rifie si l'√©tat contient des donn√©es compl√®tes
  bool _hasCompleteData() {
    return state.hasHistoricData && state.activityStats != null;
  }

  /// Accesseur pour v√©rifier si les donn√©es sont pr√™tes
  bool get isDataReady => state.isDataLoaded && !state.isLoading;
}

/// Classe helper pour les r√©sultats d'activit√© (inchang√©e)
class ActivityDataResult {
  final ActivityStats generalStats;
  final List<ActivityTypeStats> typeStats;
  final List<PeriodStats> periodStats;
  final List<PersonalGoal> goals;
  final List<PersonalRecord> records;

  ActivityDataResult({
    required this.generalStats,
    required this.typeStats,
    required this.periodStats,
    required this.goals,
    required this.records,
  });
}

enum SyncType {
  activityOnly,
  historicOnly,
  full,
}