import 'package:flutter/material.dart';
import 'package:runaway/core/blocs/app_data/app_data_event.dart';
import 'package:runaway/core/di/bloc_provider_extension.dart';
import 'package:runaway/core/services/route_data_sync_service.dart';

/// Utilitaires pour d√©clencher facilement la synchronisation des donn√©es
class DataSyncUtils {
  
  /// D√©clenche une mise √† jour compl√®te des donn√©es depuis n'importe o√π
  static void refreshAllData(BuildContext context) {
    try {
      context.appDataBloc.add(const AppDataRefreshRequested());
      print('üîÑ Rafra√Æchissement complet d√©clench√©');
    } catch (e) {
      print('‚ùå Erreur rafra√Æchissement complet: $e');
    }
  }
  
  /// D√©clenche une mise √† jour des statistiques d'activit√© uniquement
  static void refreshActivityData(BuildContext context) {
    try {
      context.appDataBloc.add(const ActivityDataRefreshRequested());
      print('üìä Rafra√Æchissement activit√© d√©clench√©');
    } catch (e) {
      print('‚ùå Erreur rafra√Æchissement activit√©: $e');
    }
  }
  
  /// D√©clenche une mise √† jour de l'historique uniquement
  static void refreshHistoricData(BuildContext context) {
    try {
      context.appDataBloc.add(const HistoricDataRefreshRequested());
      print('üìö Rafra√Æchissement historique d√©clench√©');
    } catch (e) {
      print('‚ùå Erreur rafra√Æchissement historique: $e');
    }
  }
  
  /// Force une synchronisation compl√®te en ignorant le cache
  static void forceDataSync(BuildContext context) {
    try {
      context.appDataBloc.add(const ForceDataSyncRequested());
      print('üîÑ Synchronisation forc√©e d√©clench√©e');
    } catch (e) {
      print('‚ùå Erreur synchronisation forc√©e: $e');
    }
  }
  
  /// Notifie l'ajout d'une route
  static void notifyRouteAdded(BuildContext context, String routeId, String routeName) {
    try {
      context.appDataBloc.add(RouteAddedDataSync(
        routeId: routeId,
        routeName: routeName,
      ));
      print('‚ûï Notification ajout route: $routeName');
    } catch (e) {
      print('‚ùå Erreur notification ajout route: $e');
    }
  }
  
  /// Notifie la suppression d'une route
  static void notifyRouteDeleted(BuildContext context, String routeId, String routeName) {
    try {
      context.appDataBloc.add(RouteDeletedDataSync(
        routeId: routeId,
        routeName: routeName,
      ));
      print('‚ûñ Notification suppression route: $routeName');
    } catch (e) {
      print('‚ùå Erreur notification suppression route: $e');
    }
  }
  
  /// Vide le cache des donn√©es
  static void clearDataCache(BuildContext context) {
    try {
      context.appDataBloc.add(const AppDataClearRequested());
      print('üóëÔ∏è Cache vid√©');
    } catch (e) {
      print('‚ùå Erreur vidage cache: $e');
    }
  }
  
  /// V√©rifie si les donn√©es sont pr√™tes
  static bool isDataReady(BuildContext context) {
    try {
      final appDataBloc = context.appDataBloc;
      return appDataBloc.isDataReady;
    } catch (e) {
      print('‚ùå Erreur v√©rification donn√©es: $e');
      return false;
    }
  }
  
  /// D√©clenche une synchronisation via le service global
  static void triggerServiceSync() {
    RouteDataSyncService.instance.forceSyncData();
  }
  
  /// D√©clenche un rafra√Æchissement d'activit√© via le service global
  static void triggerServiceActivityRefresh() {
    RouteDataSyncService.instance.forceActivityRefresh();
  }
  
  /// Obtient les statistiques du service de synchronisation
  static Map<String, dynamic> getSyncServiceStats() {
    final service = RouteDataSyncService.instance;
    return {
      'isInitialized': service.isInitialized,
      'trackedRoutesCount': service.trackedRoutesCount,
      'trackedRouteIds': service.trackedRouteIds,
    };
  }
}
