import 'package:shared_preferences/shared_preferences.dart';

/// Service pour g√©rer les limitations des utilisateurs non connect√©s
class GuestLimitationService {
  static const String _keyGuestGenerations = 'guest_generations_count';
  static const String _keyFirstUseDate = 'guest_first_use_date';
  static const int _maxGuestGenerations = 2; // 2 g√©n√©rations gratuites pour les guests
  static const Duration _limitPeriod = Duration(days: 30); // P√©riode de 30 jours

  static GuestLimitationService? _instance;
  static GuestLimitationService get instance => _instance ??= GuestLimitationService._();
  GuestLimitationService._();

  /// V√©rifie si un utilisateur non connect√© peut g√©n√©rer une route
  Future<bool> canGuestGenerate() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // R√©cup√©rer les donn√©es stock√©es
      final generationsCount = prefs.getInt(_keyGuestGenerations) ?? 0;
      final firstUseDateString = prefs.getString(_keyFirstUseDate);
      
      // Si c'est la premi√®re utilisation, initialiser
      if (firstUseDateString == null) {
        await _initializeGuestData(prefs);
        return true; // Premi√®re g√©n√©ration autoris√©e
      }
      
      final firstUseDate = DateTime.parse(firstUseDateString);
      final now = DateTime.now();
      
      // V√©rifier si la p√©riode de limitation est expir√©e
      if (now.difference(firstUseDate) > _limitPeriod) {
        // R√©initialiser le compteur apr√®s la p√©riode
        await _resetGuestData(prefs);
        return true;
      }
      
      // V√©rifier si l'utilisateur a encore des g√©n√©rations disponibles
      return generationsCount < _maxGuestGenerations;
      
    } catch (e) {
      print('‚ùå Erreur v√©rification limitation guest: $e');
      return false; // En cas d'erreur, refuser par s√©curit√©
    }
  }

  /// Consomme une g√©n√©ration pour un utilisateur non connect√©
  Future<bool> consumeGuestGeneration() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // V√©rifier d'abord si la g√©n√©ration est possible
      if (!await canGuestGenerate()) {
        return false;
      }
      
      // R√©cup√©rer le compteur actuel
      final currentCount = prefs.getInt(_keyGuestGenerations) ?? 0;
      
      // Incr√©menter le compteur
      await prefs.setInt(_keyGuestGenerations, currentCount + 1);
      
      print('üí≥ G√©n√©ration guest consomm√©e: ${currentCount + 1}/$_maxGuestGenerations');
      return true;
      
    } catch (e) {
      print('‚ùå Erreur consommation g√©n√©ration guest: $e');
      return false;
    }
  }

  /// Retourne le nombre de g√©n√©rations restantes pour un guest
  Future<int> getRemainingGuestGenerations() async {
    try {
      if (!await canGuestGenerate()) {
        return 0;
      }
      
      final prefs = await SharedPreferences.getInstance();
      final used = prefs.getInt(_keyGuestGenerations) ?? 0;
      return _maxGuestGenerations - used;
      
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration g√©n√©rations restantes: $e');
      return 0;
    }
  }

  /// Retourne des informations d√©taill√©es sur le statut guest
  Future<GuestLimitationStatus> getGuestStatus() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final generationsCount = prefs.getInt(_keyGuestGenerations) ?? 0;
      final firstUseDateString = prefs.getString(_keyFirstUseDate);
      
      if (firstUseDateString == null) {
        return GuestLimitationStatus(
          generationsUsed: 0,
          generationsRemaining: _maxGuestGenerations,
          limitReached: false,
          resetDate: null,
        );
      }
      
      final firstUseDate = DateTime.parse(firstUseDateString);
      final resetDate = firstUseDate.add(_limitPeriod);
      final now = DateTime.now();
      
      // Si la p√©riode est expir√©e, retourner un statut r√©initialis√©
      if (now.isAfter(resetDate)) {
        return GuestLimitationStatus(
          generationsUsed: 0,
          generationsRemaining: _maxGuestGenerations,
          limitReached: false,
          resetDate: null,
        );
      }
      
      final remaining = _maxGuestGenerations - generationsCount;
      
      return GuestLimitationStatus(
        generationsUsed: generationsCount,
        generationsRemaining: remaining.clamp(0, _maxGuestGenerations),
        limitReached: remaining <= 0,
        resetDate: resetDate,
      );
      
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration statut guest: $e');
      return GuestLimitationStatus(
        generationsUsed: _maxGuestGenerations,
        generationsRemaining: 0,
        limitReached: true,
        resetDate: null,
      );
    }
  }

  /// Nettoie les donn√©es guest lors de la connexion
  Future<void> clearGuestData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_keyGuestGenerations);
      await prefs.remove(_keyFirstUseDate);
      print('üßπ Donn√©es guest nettoy√©es');
    } catch (e) {
      print('‚ùå Erreur nettoyage donn√©es guest: $e');
    }
  }

  /// Initialise les donn√©es pour un nouvel utilisateur guest
  Future<void> _initializeGuestData(SharedPreferences prefs) async {
    await prefs.setInt(_keyGuestGenerations, 0);
    await prefs.setString(_keyFirstUseDate, DateTime.now().toIso8601String());
    print('üÜï Donn√©es guest initialis√©es');
  }

  /// R√©initialise les donn√©es apr√®s expiration de la p√©riode
  Future<void> _resetGuestData(SharedPreferences prefs) async {
    await prefs.setInt(_keyGuestGenerations, 0);
    await prefs.setString(_keyFirstUseDate, DateTime.now().toIso8601String());
    print('üîÑ Donn√©es guest r√©initialis√©es apr√®s expiration');
  }

  // Getters statiques pour l'UI
  static int get maxGuestGenerations => _maxGuestGenerations;
  static Duration get limitPeriod => _limitPeriod;
}

/// Mod√®le pour le statut de limitation guest
class GuestLimitationStatus {
  final int generationsUsed;
  final int generationsRemaining;
  final bool limitReached;
  final DateTime? resetDate;

  const GuestLimitationStatus({
    required this.generationsUsed,
    required this.generationsRemaining,
    required this.limitReached,
    this.resetDate,
  });

  /// Formate la date de reset pour l'affichage
  String? get formattedResetDate {
    if (resetDate == null) return null;
    
    final now = DateTime.now();
    final difference = resetDate!.difference(now);
    
    if (difference.inDays > 0) {
      return '${difference.inDays} jour${difference.inDays > 1 ? 's' : ''}';
    } else if (difference.inHours > 0) {
      return '${difference.inHours} heure${difference.inHours > 1 ? 's' : ''}';
    } else {
      return 'Bient√¥t';
    }
  }

  @override
  String toString() {
    return 'GuestLimitationStatus(used: $generationsUsed, remaining: $generationsRemaining, limitReached: $limitReached, resetIn: $formattedResetDate)';
  }
}