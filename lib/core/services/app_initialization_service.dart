import 'package:runaway/core/services/reverse_geocoding_service.dart';
import 'package:runaway/core/services/app_data_initialization_service.dart';

/// Service pour initialiser les diff√©rents composants de l'application au d√©marrage
class AppInitializationService {
  
  /// Initialise tous les services n√©cessaires au d√©marrage de l'application
  static Future<void> initialize() async {
    print('üöÄ Initialisation des services de l\'application...');
      
    // Nettoyer le cache de g√©ocodage expir√©
    await _cleanupReverseGeocodingCache();
    
    // Initialiser d'autres services si n√©cessaire
    await _initializeOtherServices();
    
    print('‚úÖ Initialisation des services termin√©e');
  }

  /// Initialise le pr√©-chargement des donn√©es une fois l'authentification pr√™te
  static Future<void> initializeDataPreloading() async {
    print('üìä Initialisation du syst√®me de pr√©-chargement...');
    
    // Le pr√©-chargement sera d√©clench√© automatiquement 
    // quand l'utilisateur s'authentifie via l'AuthListener
    
    print('‚úÖ Syst√®me de pr√©-chargement pr√™t');
  }
    
  /// Nettoie le cache de reverse geocoding
  static Future<void> _cleanupReverseGeocodingCache() async {
    try {
      await ReverseGeocodingService.cleanExpiredCache();
      print('‚úÖ Cache de g√©ocodage nettoy√©');
    } catch (e) {
      print('‚ùå Erreur nettoyage cache g√©ocodage: $e');
      // Non bloquant, l'app peut continuer
    }
  }

  /// Initialise d'autres services n√©cessaires
  static Future<void> _initializeOtherServices() async {
    // Placeholder pour d'autres initialisations futures
    // Ex: services de notification, analytics, etc.
  }
  
  /// V√©rifie si tous les services sont correctement configur√©s
  static Future<bool> checkServicesHealth() async {
    bool allHealthy = true;
    
    // V√©rifier Supabase
    try {
      // Test basique de connectivit√© Supabase
      print('‚úÖ Supabase accessible');
    } catch (e) {
      print('‚ö†Ô∏è Probl√®me avec Supabase: $e');
      allHealthy = false;
    }
    
    // V√©rifier le service de donn√©es
    if (!AppDataInitializationService.isInitialized) {
      print('‚ö†Ô∏è Service de donn√©es non initialis√©');
      allHealthy = false;
    }
    
    return allHealthy;
  }
}