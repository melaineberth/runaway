// lib/features/auth/data/repositories/auth_repository.dart

import 'dart:io';

import 'package:path/path.dart' as p;
import 'package:runaway/core/errors/auth_exceptions.dart';
import 'package:runaway/features/auth/domain/models/profile.dart';
import 'package:supabase_flutter/supabase_flutter.dart' hide AuthException;

class AuthRepository {
  final SupabaseClient _supabase = Supabase.instance.client;

  User? get currentUser => _supabase.auth.currentUser;

  // ---------- stream Auth (session) ----------
  Stream<AuthState> get authChangesStream => _supabase.auth.onAuthStateChange;

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1) CR√âATION DE COMPTE (√âTAPE 1) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  Future<User?> signUpBasic({
    required String email,
    required String password,
  }) async {
    try {
      print('üîë Tentative d\'inscription: $email');
      
      final resp = await _supabase.auth.signUp(
        email: email.trim(),
        password: password,
      );
      
      if (resp.user != null) {
        print('‚úÖ Inscription r√©ussie pour: ${resp.user!.email}');
        return resp.user;
      } else {
        print('‚ùå Inscription √©chou√©e: aucun utilisateur retourn√©');
        throw SignUpException('Impossible de cr√©er le compte');
      }
    } catch (e) {
      print('‚ùå Erreur inscription: $e');
      throw AuthExceptionHandler.handleSupabaseError(e);
    }
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2) COMPL√âMENT DE PROFIL (√âTAPE 2) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  Future<Profile?> completeProfile({
    required String userId,
    required String fullName,
    required String username,
    File? avatar,
  }) async {
    try {
      print('üë§ Compl√©tion du profil pour: $userId');
      
      String? avatarUrl;
      
      // Upload de l'avatar si fourni (mais ne pas faire √©chouer si √ßa rate)
      if (avatar != null) {
        try {
          // Structure : userId/profile_picture/profile_picture.extension
          final extension = p.extension(avatar.path);
          final filePath = '$userId/profile_picture/profile_picture$extension';
          
          print('üì∏ Upload avatar: $filePath');
          
          await _supabase.storage.from('profile').upload(
            filePath, 
            avatar,
            fileOptions: const FileOptions(
              cacheControl: '3600',
              upsert: true, // √âcraser si existe d√©j√†
            ),
          );
          
          avatarUrl = _supabase.storage.from('profile').getPublicUrl(filePath);
          print('‚úÖ Avatar upload√©: $avatarUrl');
        } catch (e) {
          print('‚ö†Ô∏è Erreur upload avatar (continuez sans avatar): $e');
          // FIX: Continuer SANS avatar plut√¥t que d'√©chouer
          // L'utilisateur peut ajouter son avatar plus tard
          avatarUrl = null;
        }
      }


      // R√©cup√©rer l'email depuis l'utilisateur actuel AVANT l'upsert
      final currentUser = _supabase.auth.currentUser;
      if (currentUser?.email == null) {
        throw ProfileException('Impossible de r√©cup√©rer l\'email utilisateur');
      }

      // Sauvegarder le profil (FIX: inclure l'email qui est NOT NULL)
      final data = await _supabase
          .from('profiles')
          .upsert({
            'id': userId,
            'email': currentUser!.email!, // FIX: Ajouter l'email obligatoire
            'full_name': fullName.trim(),
            'username': username.trim().toLowerCase(),
            'avatar_url': avatarUrl,
            'updated_at': DateTime.now().toIso8601String(),
          })
          .select()
          .maybeSingle();

      if (data == null) {
        print('‚ùå Aucune donn√©e retourn√©e apr√®s upsert profil');
        throw ProfileException('Impossible de sauvegarder le profil');
      }

      // FIX: L'email est d√©j√† inclus dans les donn√©es retourn√©es
      final profile = Profile.fromJson(data);

      print('‚úÖ Profil compl√©t√©: ${profile.username}');
      return profile;
    } catch (e) {
      print('‚ùå Erreur compl√©tion profil: $e');
      if (e is AuthException) {
        rethrow;
      }
      throw AuthExceptionHandler.handleSupabaseError(e);
    }
  }

  // ---------- connexion ----------
  Future<Profile?> logIn({
    required String email,
    required String password,
  }) async {
    try {
      print('üîë Tentative de connexion: $email');
      
      final resp = await _supabase.auth.signInWithPassword(
        email: email.trim(),
        password: password,
      );
      
      final user = resp.user;
      if (user == null) {
        print('‚ùå Connexion √©chou√©e: aucun utilisateur retourn√©');
        throw LoginException('Connexion √©chou√©e');
      }
      
      print('‚úÖ Connexion r√©ussie: ${user.email}');
      
      // R√©cup√©rer le profil
      final profile = await getProfile(user.id);
      if (profile == null) {
        print('‚ö†Ô∏è Connexion r√©ussie mais profil incomplet');
      } else {
        print('‚úÖ Profil r√©cup√©r√©: ${profile.username}');
      }
      
      return profile;
    } catch (e) {
      print('‚ùå Erreur connexion: $e');
      throw AuthExceptionHandler.handleSupabaseError(e);
    }
  }

  // ---------- lecture profile ----------
  // FIX: Ne plus nettoyer automatiquement les comptes
  Future<Profile?> getProfile(String id, {bool skipCleanup = false}) async {
    try {
      print('üë§ R√©cup√©ration profil: $id');
      
      final data = await _supabase
          .from('profiles')
          .select()
          .eq('id', id)
          .maybeSingle();
      
      if (data == null) {
        print('‚ö†Ô∏è Aucun profil trouv√© pour: $id');
        
        // FIX: Ne nettoyer que si explicitement demand√©
        // Cela permet aux nouveaux utilisateurs d'avoir une chance de compl√©ter leur profil
        if (!skipCleanup) {
          print('‚ÑπÔ∏è Profil non trouv√© mais pas de nettoyage automatique');
        }
        return null;
      }
      
      // FIX: L'email est maintenant directement dans les donn√©es de la DB
      final profile = Profile.fromJson(data);
      
      print('‚úÖ Profil r√©cup√©r√©: ${profile.username}');
      return profile;
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration profil: $e');
      throw AuthExceptionHandler.handleSupabaseError(e);
    }
  }

  // ---------- d√©connexion ----------
  Future<void> logOut() async {
    try {
      print('üëã D√©connexion...');
      await _supabase.auth.signOut();
      print('‚úÖ D√©connexion r√©ussie');
    } catch (e) {
      print('‚ùå Erreur d√©connexion: $e');
      throw AuthExceptionHandler.handleSupabaseError(e);
    }
  }

  // ---------- v√©rification du nom d'utilisateur ----------
  Future<bool> isUsernameAvailable(String username) async {
    try {
      final result = await _supabase
          .from('profiles')
          .select('id')
          .eq('username', username.trim().toLowerCase())
          .maybeSingle();
      
      return result == null; // Disponible si aucun r√©sultat
    } catch (e) {
      print('‚ùå Erreur v√©rification username: $e');
      // En cas d'erreur, consid√©rer comme non disponible par s√©curit√©
      return false;
    }
  }

  // ---------- mise √† jour du profil ----------
  Future<Profile?> updateProfile({
    required String userId,
    String? fullName,
    String? username,
    String? phone,
    File? avatar,
  }) async {
    try {
      print('üìù Mise √† jour profil: $userId');
      
      final Map<String, dynamic> updates = {
        'updated_at': DateTime.now().toIso8601String(),
      };
      
      if (fullName != null) updates['full_name'] = fullName.trim();
      if (username != null) {
        // V√©rifier la disponibilit√© du nom d'utilisateur
        final isAvailable = await isUsernameAvailable(username);
        if (!isAvailable) {
          throw ProfileException('Ce nom d\'utilisateur est d√©j√† pris');
        }
        updates['username'] = username.trim().toLowerCase();
      }
      if (phone != null) updates['phone'] = phone.trim();
      
      // Upload nouvel avatar si fourni
      if (avatar != null) {
        try {
          final filePath = 'profile/$userId${p.extension(avatar.path)}';
          await _supabase.storage.from('profile').upload(
            filePath, 
            avatar,
            fileOptions: const FileOptions(
              cacheControl: '3600',
              upsert: true,
            ),
          );
          updates['avatar_url'] = _supabase.storage.from('profile').getPublicUrl(filePath);
        } catch (e) {
          print('‚ö†Ô∏è Erreur upload nouvel avatar: $e');
          // Continuer sans mettre √† jour l'avatar
        }
      }
      
      final data = await _supabase
          .from('profiles')
          .update(updates)
          .eq('id', userId)
          .select()
          .maybeSingle();
      
      if (data == null) {
        throw ProfileException('Impossible de mettre √† jour le profil');
      }
      
      // FIX: L'email est maintenant directement dans les donn√©es retourn√©es
      final profile = Profile.fromJson(data);
      
      print('‚úÖ Profil mis √† jour: ${profile.username}');
      return profile;
    } catch (e) {
      print('‚ùå Erreur mise √† jour profil: $e');
      if (e is AuthException) {
        rethrow;
      }
      throw AuthExceptionHandler.handleSupabaseError(e);
    }
  }

  // ---------- v√©rification et nettoyage d'√©tat ----------
  Future<bool> hasCompleteProfile(String userId) async {
    try {
      final data = await _supabase
          .from('profiles')
          .select('username, full_name')
          .eq('id', userId)
          .maybeSingle();
      
      if (data == null) return false;
      
      final username = data['username'] as String?;
      final fullName = data['full_name'] as String?;
      
      return username != null && 
             username.isNotEmpty && 
             fullName != null && 
             fullName.isNotEmpty;
    } catch (e) {
      print('‚ùå Erreur v√©rification profil: $e');
      return false;
    }
  }

  /// Nettoie un compte corrompu (authentifi√© dans Supabase mais sans profil complet)
  /// FIX: Maintenant appel√©e explicitement seulement quand n√©cessaire
  Future<void> cleanupCorruptedAccount() async {
    try {
      final user = currentUser;
      if (user == null) return;
      
      print('üßπ Nettoyage compte corrompu: ${user.email}');
      
      // Supprimer le profil partiel s'il existe
      await _supabase
          .from('profiles')
          .delete()
          .eq('id', user.id);
      
      // D√©connecter l'utilisateur
      await logOut();
      
      print('‚úÖ Compte corrompu nettoy√©');
    } catch (e) {
      print('‚ùå Erreur nettoyage compte: $e');
      // Forcer la d√©connexion m√™me en cas d'erreur
      try {
        await logOut();
      } catch (logoutError) {
        print('‚ùå Erreur d√©connexion forc√©e: $logoutError');
      }
    }
  }

  // ---------- Nouvelle m√©thode pour v√©rifier si un compte est vraiment corrompu ----------
  Future<bool> isCorruptedAccount(String userId) async {
    try {
      final user = currentUser;
      if (user == null) return false;
      
      // FIX: createdAt est d√©j√† une DateTime, pas besoin de parser
      final createdAtString = user.createdAt;
      final createdAt = DateTime.parse(createdAtString);
      final now = DateTime.now();
      final accountAge = now.difference(createdAt);
      
      print('üïê √Çge du compte: ${accountAge.inHours}h');
      
      // Si le compte existe depuis plus de 24h sans profil, c'est probablement corrompu
      if (accountAge.inHours > 24) {
        final hasProfile = await hasCompleteProfile(userId);
        print('üìã Profil complet: $hasProfile');
        return !hasProfile;
      }
      
      return false; // Compte r√©cent sans profil = normal
    } catch (e) {
      print('‚ùå Erreur v√©rification corruption: $e');
      return false;
    }
  }

  // ---------- suppression du compte ----------
  Future<void> deleteAccount() async {
    try {
      final user = currentUser;
      if (user == null) {
        throw SessionException('Aucun utilisateur connect√©');
      }
      
      print('üóëÔ∏è Suppression compte: ${user.id}');
      
      // Supprimer d'abord le profil
      await _supabase
          .from('profiles')
          .delete()
          .eq('id', user.id);
      
      // Supprimer l'avatar du storage si existe
      try {
        await _supabase.storage
            .from('profile')
            .remove(['profile/${user.id}']);
      } catch (e) {
        // Ignorer les erreurs de suppression de fichier
        print('‚ö†Ô∏è Erreur suppression avatar: $e');
      }
      
      // Note: La suppression de l'utilisateur auth doit √™tre faite c√¥t√© serveur
      // Pour l'instant, on se contente de supprimer le profil et d√©connecter
      await logOut();
      
      print('‚úÖ Compte supprim√©');
    } catch (e) {
      print('‚ùå Erreur suppression compte: $e');
      throw AuthExceptionHandler.handleSupabaseError(e);
    }
  }
}