// lib/features/navigation/presentation/blocs/navigation/navigation_bloc.dart
import 'dart:async';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:geolocator/geolocator.dart';
import 'package:runaway/features/navigation/data/services/navigation_metrics_service.dart';
import 'package:runaway/features/navigation/domain/models/navigation_models.dart';
import 'navigation_event.dart';
import 'navigation_state.dart';

class NavigationBloc extends Bloc<NavigationEvent, NavigationState> {
  Timer? _timer;
  StreamSubscription<Position>? _positionSubscription;
  bool _hasReceivedFirstPosition = false; // üÜï Flag pour premi√®re position

  NavigationBloc() : super(NavigationState.initial) {
    on<NavigationStarted>(_onNavigationStarted);
    on<NavigationPaused>(_onNavigationPaused);
    on<NavigationResumed>(_onNavigationResumed);
    on<NavigationStopped>(_onNavigationStopped);
    on<NavigationPositionUpdated>(_onNavigationPositionUpdated);
    on<NavigationTimerTick>(_onNavigationTimerTick);
    on<NavigationReset>(_onNavigationReset);
    on<NavigationSessionSaved>(_onNavigationSessionSaved);
  }

  @override
  Future<void> close() {
    _timer?.cancel();
    _positionSubscription?.cancel();
    return super.close();
  }

  /// D√©marrer la navigation
  Future<void> _onNavigationStarted(
    NavigationStarted event,
    Emitter<NavigationState> emit,
  ) async {
    try {
      print('üöÄ === D√âBUT NAVIGATION ===');
      print('üìç Route: ${event.originalRoute.length} points');
      print('üìè Distance cible: ${event.targetDistanceKm}km');

      // R√©initialiser le flag de premi√®re position
      _hasReceivedFirstPosition = false;

      // Cr√©er une nouvelle session
      final session = NavigationSession.initial(
        originalRoute: event.originalRoute,
      ).copyWith(
        status: NavigationStatus.starting,
      );

      emit(state.copyWith(
        currentSession: session,
        isTracking: true,
        isPaused: false,
        targetDistanceKm: event.targetDistanceKm,
        routeName: event.routeName,
        errorMessage: null,
      ));

      // üîß D√âMARRER LE GPS EN PREMIER
      await _startLocationTracking();

      // üîß ATTENDRE LA PREMI√àRE POSITION AVANT DE MARQUER COMME ACTIF
      // Le passage √† "active" se fera dans _onNavigationPositionUpdated

      print('‚úÖ Navigation en attente de premi√®re position GPS');

    } catch (e) {
      print('‚ùå Erreur d√©marrage navigation: $e');
      emit(state.copyWith(
        errorMessage: 'Erreur lors du d√©marrage: $e',
        isTracking: false,
      ));
    }
  }

  /// Mettre en pause
  void _onNavigationPaused(
    NavigationPaused event,
    Emitter<NavigationState> emit,
  ) {
    print('‚è∏Ô∏è Navigation mise en pause');
    
    _timer?.cancel();
    _positionSubscription?.cancel();

    if (state.currentSession != null) {
      final pausedSession = state.currentSession!.copyWith(
        status: NavigationStatus.paused,
      );
      emit(state.copyWith(
        currentSession: pausedSession,
        isPaused: true,
      ));
    }
  }

  /// Reprendre
  Future<void> _onNavigationResumed(
    NavigationResumed event,
    Emitter<NavigationState> emit,
  ) async {
    print('‚ñ∂Ô∏è Navigation reprise');

    _startTimer();
    await _startLocationTracking();

    if (state.currentSession != null) {
      final activeSession = state.currentSession!.copyWith(
        status: NavigationStatus.active,
      );
      emit(state.copyWith(
        currentSession: activeSession,
        isPaused: false,
      ));
    }
  }

  /// Arr√™ter/terminer
  void _onNavigationStopped(
    NavigationStopped event,
    Emitter<NavigationState> emit,
  ) {
    print('üèÅ === NAVIGATION TERMIN√âE ===');

    _timer?.cancel();
    _positionSubscription?.cancel();
    _hasReceivedFirstPosition = false; // üîß Reset du flag

    if (state.currentSession != null) {
      final finishedSession = state.currentSession!.copyWith(
        status: NavigationStatus.finished,
        endTime: DateTime.now(),
      );

      emit(state.copyWith(
        currentSession: finishedSession,
        isTracking: false,
        isPaused: false,
      ));

      // Afficher les statistiques finales
      final finalStats = NavigationMetricsService.calculateFinalStats(finishedSession);
      print('üìä Statistiques finales: $finalStats');
    }
  }

  /// Nouvelle position GPS
  void _onNavigationPositionUpdated(
    NavigationPositionUpdated event,
    Emitter<NavigationState> emit,
  ) {
    if (!state.isTracking || state.currentSession == null) return;

    final position = event.position;
    
    // Cr√©er un nouveau point de tracking
    final trackingPoint = TrackingPoint(
      latitude: position.latitude,
      longitude: position.longitude,
      altitude: position.altitude,
      speed: position.speed,
      accuracy: position.accuracy,
      timestamp: DateTime.now(),
    );

    // Ajouter le point √† la session
    final updatedPoints = List<TrackingPoint>.from(state.trackingPoints)
      ..add(trackingPoint);

    // üîß GESTION SP√âCIALE PREMI√àRE POSITION
    if (!_hasReceivedFirstPosition) {
      print('üìç === PREMI√àRE POSITION RE√áUE ===');
      print('üìç Latitude: ${position.latitude.toStringAsFixed(6)}');
      print('üìç Longitude: ${position.longitude.toStringAsFixed(6)}');
      print('üìç Pr√©cision: ${position.accuracy.toStringAsFixed(1)}m');
      
      _hasReceivedFirstPosition = true;
      
      // Marquer la session comme active maintenant qu'on a une position
      final activeSession = state.currentSession!.copyWith(
        status: NavigationStatus.active,
        trackingPoints: updatedPoints,
      );

      // D√©marrer le timer maintenant
      _startTimer();

      emit(state.copyWith(currentSession: activeSession));
      
      print('‚úÖ Navigation activ√©e avec premi√®re position');
      return;
    }

    // Calculer les nouvelles m√©triques pour les positions suivantes
    final newMetrics = NavigationMetricsService.calculateMetrics(
      trackingPoints: updatedPoints,
      originalRoute: state.originalRoute,
      startTime: state.currentSession!.startTime,
      targetDistanceKm: state.targetDistanceKm,
    );

    // Mettre √† jour la session
    final updatedSession = state.currentSession!.copyWith(
      trackingPoints: updatedPoints,
      metrics: newMetrics,
    );

    emit(state.copyWith(currentSession: updatedSession));

    // Debug des m√©triques (moins verbose apr√®s la premi√®re position)
    if (updatedPoints.length % 10 == 0) { // Log toutes les 10 positions
      print('üìç Distance: ${newMetrics.distanceKm.toStringAsFixed(2)}km, Vitesse: ${newMetrics.currentSpeedKmh.toStringAsFixed(1)}km/h');
    }
  }

  /// Tick du timer (chaque seconde)
  void _onNavigationTimerTick(
    NavigationTimerTick event,
    Emitter<NavigationState> emit,
  ) {
    if (!state.isNavigating || state.currentSession == null) return;

    // Recalculer les m√©triques avec le temps √©coul√© mis √† jour
    final newMetrics = NavigationMetricsService.calculateMetrics(
      trackingPoints: state.trackingPoints,
      originalRoute: state.originalRoute,
      startTime: state.currentSession!.startTime,
      targetDistanceKm: state.targetDistanceKm,
    );

    final updatedSession = state.currentSession!.copyWith(metrics: newMetrics);
    emit(state.copyWith(currentSession: updatedSession));
  }

  /// R√©initialiser
  void _onNavigationReset(
    NavigationReset event,
    Emitter<NavigationState> emit,
  ) {
    print('üîÑ R√©initialisation navigation');
    
    _timer?.cancel();
    _positionSubscription?.cancel();
    _hasReceivedFirstPosition = false; // üîß Reset du flag

    emit(NavigationState.initial);
  }

  /// Sauvegarder la session
  Future<void> _onNavigationSessionSaved(
    NavigationSessionSaved event,
    Emitter<NavigationState> emit,
  ) async {
    if (state.currentSession == null) return;

    try {
      emit(state.copyWith(isSaving: true));

      // TODO: Impl√©menter la sauvegarde en base de donn√©es
      // await _saveSessionToDatabase(state.currentSession!, event.sessionName);

      print('üíæ Session sauvegard√©e: ${event.sessionName}');
      
      emit(state.copyWith(isSaving: false));

    } catch (e) {
      print('‚ùå Erreur sauvegarde session: $e');
      emit(state.copyWith(
        isSaving: false,
        errorMessage: 'Erreur de sauvegarde: $e',
      ));
    }
  }

  /// D√©marrer le timer de mise √† jour
  void _startTimer() {
    _timer?.cancel();
    _timer = Timer.periodic(const Duration(seconds: 1), (_) {
      if (state.isNavigating) { // Seulement si navigation active
        add(const NavigationTimerTick());
      }
    });
    print('‚è±Ô∏è Timer de navigation d√©marr√©');
  }

  /// D√©marrer le tracking GPS
  Future<void> _startLocationTracking() async {
    try {
      // V√©rifier les permissions
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          throw 'Permissions de localisation refus√©es';
        }
      }

      if (permission == LocationPermission.deniedForever) {
        throw 'Permissions de localisation d√©finitivement refus√©es';
      }

      // üîß CONFIGURATION OPTIMIS√âE POUR PREMI√àRE POSITION
      const LocationSettings locationSettings = LocationSettings(
        accuracy: LocationAccuracy.bestForNavigation,
        distanceFilter: 1, // Plus sensible pour capturer la premi√®re position rapidement
        timeLimit: Duration(seconds: 30), // Timeout pour √©viter d'attendre ind√©finiment
      );

      print('üì° D√©marrage tracking GPS avec configuration optimis√©e...');

      // D√©marrer le stream de positions
      _positionSubscription?.cancel();
      _positionSubscription = Geolocator.getPositionStream(
        locationSettings: locationSettings,
      ).listen(
        (position) {
          // V√©rifier la pr√©cision de la position
          if (position.accuracy > 100) {
            print('‚ö†Ô∏è Position impr√©cise (${position.accuracy.toStringAsFixed(1)}m), attente meilleure pr√©cision...');
            return;
          }
          
          add(NavigationPositionUpdated(position));
        },
        onError: (error) {
          print('‚ùå Erreur GPS: $error');
          add(NavigationStopped());
        },
      );

      // üÜï OBTENIR UNE POSITION IMM√âDIATE POUR D√âMARRER PLUS VITE
      try {
        print('üéØ Tentative d\'obtention d\'une position imm√©diate...');
        final currentPosition = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.bestForNavigation,
          timeLimit: Duration(seconds: 10),
        );
        
        if (currentPosition.accuracy <= 50) { // Seulement si pr√©cision acceptable
          print('‚úÖ Position imm√©diate obtenue avec bonne pr√©cision');
          add(NavigationPositionUpdated(currentPosition));
        }
      } catch (e) {
        print('‚ö†Ô∏è Impossible d\'obtenir position imm√©diate: $e');
        // Pas grave, on attend le stream
      }

      print('üì° Tracking GPS d√©marr√©');

    } catch (e) {
      print('‚ùå Erreur d√©marrage GPS: $e');
      throw 'Impossible de d√©marrer le GPS: $e';
    }
  }
}