import 'package:runaway/core/helper/config/log_config.dart';
import 'package:supabase_flutter/supabase_flutter.dart' as su;
import 'package:runaway/core/blocs/app_data/app_data_bloc.dart';
import 'package:runaway/core/blocs/app_data/app_data_event.dart';
import 'package:runaway/features/credits/data/repositories/credits_repository.dart';
import 'package:runaway/features/credits/presentation/blocs/credits_bloc.dart';

/// R√©sultat de la v√©rification des cr√©dits
class CreditVerificationResult {
  final bool hasEnoughCredits;
  final int availableCredits;
  final int requiredCredits;
  final String? errorMessage;

  const CreditVerificationResult({
    required this.hasEnoughCredits,
    required this.availableCredits,
    required this.requiredCredits,
    this.errorMessage,
  });

  bool get isValid => hasEnoughCredits && errorMessage == null;
}

/// R√©sultat de la consommation de cr√©dits
class CreditConsumptionResult {
  final bool success;
  final int? newBalance;
  final String? transactionId;
  final String? errorMessage;

  const CreditConsumptionResult({
    required this.success,
    this.newBalance,
    this.transactionId,
    this.errorMessage,
  });
}

/// Service d√©di√© √† la gestion des cr√©dits pour la g√©n√©ration de routes
/// S√©pare la logique des cr√©dits du RouteGenerationBloc
class CreditVerificationService {
  final CreditsRepository _creditsRepository;
  final CreditsBloc _creditsBloc;
  final AppDataBloc? _appDataBloc;

  const CreditVerificationService({
    required CreditsRepository creditsRepository,
    required CreditsBloc creditsBloc,
    AppDataBloc? appDataBloc,
  }) : _creditsRepository = creditsRepository,
       _creditsBloc = creditsBloc,
       _appDataBloc = appDataBloc;

  /// V√©rifie si l'utilisateur a suffisamment de cr√©dits
  Future<CreditVerificationResult> verifyCreditsForGeneration({
    int requiredCredits = 1,
  }) async {
    try {
      LogConfig.logInfo('üí≥ === V√âRIFICATION CR√âDITS ===');
      LogConfig.logInfo('üí≥ Cr√©dits requis: $requiredCredits');

      // V√©rifier l'authentification
      final currentUser = su.Supabase.instance.client.auth.currentUser;
      if (currentUser == null) {
        return CreditVerificationResult(
          hasEnoughCredits: false,
          availableCredits: 0,
          requiredCredits: requiredCredits,
          errorMessage: 'Session expir√©e. Veuillez vous reconnecter.',
        );
      }

      // R√©cup√©rer les cr√©dits via la logique UI First
      int availableCredits;
      
      // Priorit√© 1: AppDataBloc si donn√©es charg√©es
      if (_appDataBloc != null && _appDataBloc.state.isCreditDataLoaded) {
        availableCredits = _appDataBloc.state.availableCredits;
        LogConfig.logInfo('üí≥ Cr√©dits depuis AppDataBloc: $availableCredits');
      } 
      // Priorit√© 2: CreditsBloc local
      else {
        final hasEnough = await _creditsBloc.hasEnoughCredits(requiredCredits);
        if (!hasEnough) {
          // R√©cup√©rer le nombre exact via API
          final userCredits = await _creditsRepository.getUserCredits();
          availableCredits = userCredits.availableCredits;
        } else {
          // Si suffisant, r√©cup√©rer quand m√™me le nombre exact
          final userCredits = await _creditsRepository.getUserCredits();
          availableCredits = userCredits.availableCredits;
        }
        LogConfig.logInfo('üí≥ Cr√©dits depuis API: $availableCredits');
      }

      final hasEnough = availableCredits >= requiredCredits;
      
      LogConfig.logInfo('üí≥ R√©sultat: ${hasEnough ? "‚úÖ" : "‚ùå"} ($availableCredits >= $requiredCredits)');

      return CreditVerificationResult(
        hasEnoughCredits: hasEnough,
        availableCredits: availableCredits,
        requiredCredits: requiredCredits,
      );

    } catch (e) {
      LogConfig.logError('‚ùå Erreur v√©rification cr√©dits: $e');
      return CreditVerificationResult(
        hasEnoughCredits: false,
        availableCredits: 0,
        requiredCredits: requiredCredits,
        errorMessage: 'Erreur lors de la v√©rification des cr√©dits. Veuillez r√©essayer.',
      );
    }
  }

  /// Consomme les cr√©dits avec mise √† jour optimiste
  Future<CreditConsumptionResult> consumeCreditsForGeneration({
    required int amount,
    required String generationId,
    required Map<String, dynamic> metadata,
  }) async {
    try {
      LogConfig.logInfo('üí≥ === CONSOMMATION CR√âDITS ===');
      LogConfig.logInfo('üí≥ Montant: $amount, ID: $generationId');

      // Mise √† jour optimiste si AppDataBloc disponible
      int? originalBalance;
      if (_appDataBloc != null && _appDataBloc.state.isCreditDataLoaded) {
        originalBalance = _appDataBloc.state.availableCredits;
        final newBalance = originalBalance - amount;
        
        _appDataBloc.add(CreditBalanceUpdatedInAppData(
          newBalance: newBalance,
          isOptimistic: true,
        ));
        LogConfig.logInfo('Mise √† jour optimiste: $originalBalance ‚Üí $newBalance cr√©dits');
      }

      // Consommation r√©elle via API
      final usageResult = await _creditsRepository.useCredits(
        amount: amount,
        reason: 'Route generation',
        routeGenerationId: generationId,
        metadata: metadata,
      );

      if (usageResult.success && usageResult.updatedCredits != null) {
        LogConfig.logInfo('Consommation r√©ussie');
        LogConfig.logInfo('üí∞ Nouveau solde: ${usageResult.updatedCredits!.availableCredits}');
        
        return CreditConsumptionResult(
          success: true,
          newBalance: usageResult.updatedCredits!.availableCredits,
          transactionId: usageResult.transactionId,
        );
      } else {
        LogConfig.logError('‚ùå √âchec consommation: ${usageResult.errorMessage}');
        
        // Annuler la mise √† jour optimiste
        if (_appDataBloc != null && originalBalance != null) {
          _appDataBloc.add(CreditBalanceUpdatedInAppData(
            newBalance: originalBalance,
            isOptimistic: false,
          ));
        }

        return CreditConsumptionResult(
          success: false,
          errorMessage: usageResult.errorMessage ?? 'Erreur lors de l\'utilisation des cr√©dits',
        );
      }
    } catch (e) {
      LogConfig.logError('‚ùå Erreur consommation cr√©dits: $e');
      return CreditConsumptionResult(
        success: false,
        errorMessage: 'Erreur lors de la consommation des cr√©dits: $e',
      );
    }
  }

  /// V√©rifie si l'utilisateur peut g√©n√©rer une route (m√©thode rapide)
  Future<bool> canGenerateRoute() async {
    try {
      // Priorit√© 1: AppDataBloc si donn√©es charg√©es
      if (_appDataBloc != null && _appDataBloc.state.isCreditDataLoaded) {
        return _appDataBloc.state.canGenerateRoute;
      }
      
      // Fallback vers CreditsBloc
      return await _creditsBloc.hasEnoughCredits(1);
    } catch (e) {
      LogConfig.logError('‚ùå Erreur v√©rification possibilit√© g√©n√©ration: $e');
      return false;
    }
  }

  /// R√©cup√®re le nombre de cr√©dits disponibles
  Future<int> getAvailableCredits() async {
    try {
      // Priorit√© 1: AppDataBloc si disponible
      if (_appDataBloc != null && _appDataBloc.state.isCreditDataLoaded) {
        return _appDataBloc.state.availableCredits;
      }
      
      // Priorit√© 2: API directe
      final userCredits = await _creditsRepository.getUserCredits();
      return userCredits.availableCredits;
    } catch (e) {
      LogConfig.logError('‚ùå Erreur r√©cup√©ration cr√©dits: $e');
      return 0;
    }
  }

  /// D√©clenche le pr√©-chargement des cr√©dits si n√©cessaire
  void ensureCreditDataLoaded() {
    if (_appDataBloc != null && !_appDataBloc.state.isCreditDataLoaded) {
      LogConfig.logInfo('üí≥ D√©clenchement pr√©-chargement cr√©dits depuis CreditVerificationService');
      _appDataBloc.add(const CreditDataPreloadRequested());
    }
  }
}