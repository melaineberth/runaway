// Mocks generated by Mockito 5.4.6 from annotations
// in runaway/test/unit/blocs/route_generation_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter_bloc/flutter_bloc.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:runaway/core/blocs/app_data/app_data_bloc.dart' as _i9;
import 'package:runaway/core/blocs/app_data/app_data_event.dart' as _i10;
import 'package:runaway/core/blocs/app_data/app_data_state.dart' as _i5;
import 'package:runaway/features/credits/data/services/credit_verification_service.dart'
    as _i4;
import 'package:runaway/features/route_generator/data/repositories/routes_repository.dart'
    as _i6;
import 'package:runaway/features/route_generator/data/services/route_cache.dart'
    as _i3;
import 'package:runaway/features/route_generator/data/services/screenshot_service.dart'
    as _i12;
import 'package:runaway/features/route_generator/domain/models/route_parameters.dart'
    as _i8;
import 'package:runaway/features/route_generator/domain/models/saved_route.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSavedRoute_0 extends _i1.SmartFake implements _i2.SavedRoute {
  _FakeSavedRoute_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRouteCacheStats_1 extends _i1.SmartFake
    implements _i3.RouteCacheStats {
  _FakeRouteCacheStats_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCreditVerificationResult_2 extends _i1.SmartFake
    implements _i4.CreditVerificationResult {
  _FakeCreditVerificationResult_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCreditConsumptionResult_3 extends _i1.SmartFake
    implements _i4.CreditConsumptionResult {
  _FakeCreditConsumptionResult_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAppDataState_4 extends _i1.SmartFake implements _i5.AppDataState {
  _FakeAppDataState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [RoutesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoutesRepository extends _i1.Mock implements _i6.RoutesRepository {
  MockRoutesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i2.SavedRoute> saveRoute({
    required String? name,
    required _i8.RouteParameters? parameters,
    required List<List<double>>? coordinates,
    double? actualDistance,
    int? estimatedDuration,
    String? imageUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveRoute, [], {
              #name: name,
              #parameters: parameters,
              #coordinates: coordinates,
              #actualDistance: actualDistance,
              #estimatedDuration: estimatedDuration,
              #imageUrl: imageUrl,
            }),
            returnValue: _i7.Future<_i2.SavedRoute>.value(
              _FakeSavedRoute_0(
                this,
                Invocation.method(#saveRoute, [], {
                  #name: name,
                  #parameters: parameters,
                  #coordinates: coordinates,
                  #actualDistance: actualDistance,
                  #estimatedDuration: estimatedDuration,
                  #imageUrl: imageUrl,
                }),
              ),
            ),
          )
          as _i7.Future<_i2.SavedRoute>);

  @override
  _i7.Future<List<_i2.SavedRoute>> getUserRoutes({
    bool? forceRefresh = false,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUserRoutes, [], {
              #forceRefresh: forceRefresh,
            }),
            returnValue: _i7.Future<List<_i2.SavedRoute>>.value(
              <_i2.SavedRoute>[],
            ),
          )
          as _i7.Future<List<_i2.SavedRoute>>);

  @override
  _i7.Future<void> deleteRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRoute, [routeId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> renameRoute(String? routeId, String? newName) =>
      (super.noSuchMethod(
            Invocation.method(#renameRoute, [routeId, newName]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> updateRouteUsage(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#updateRouteUsage, [routeId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> syncPendingRoutes() =>
      (super.noSuchMethod(
            Invocation.method(#syncPendingRoutes, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> performMaintenanceTasks() =>
      (super.noSuchMethod(
            Invocation.method(#performMaintenanceTasks, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<Map<String, dynamic>> getSystemStats() =>
      (super.noSuchMethod(
            Invocation.method(#getSystemStats, []),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<_i3.RouteCacheStats> getCacheStats() =>
      (super.noSuchMethod(
            Invocation.method(#getCacheStats, []),
            returnValue: _i7.Future<_i3.RouteCacheStats>.value(
              _FakeRouteCacheStats_1(
                this,
                Invocation.method(#getCacheStats, []),
              ),
            ),
          )
          as _i7.Future<_i3.RouteCacheStats>);
}

/// A class which mocks [CreditVerificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreditVerificationService extends _i1.Mock
    implements _i4.CreditVerificationService {
  MockCreditVerificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.CreditVerificationResult> verifyCreditsForGeneration({
    int? requiredCredits = 1,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#verifyCreditsForGeneration, [], {
              #requiredCredits: requiredCredits,
            }),
            returnValue: _i7.Future<_i4.CreditVerificationResult>.value(
              _FakeCreditVerificationResult_2(
                this,
                Invocation.method(#verifyCreditsForGeneration, [], {
                  #requiredCredits: requiredCredits,
                }),
              ),
            ),
          )
          as _i7.Future<_i4.CreditVerificationResult>);

  @override
  _i7.Future<_i4.CreditConsumptionResult> consumeCreditsForGeneration({
    required int? amount,
    required String? generationId,
    required Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#consumeCreditsForGeneration, [], {
              #amount: amount,
              #generationId: generationId,
              #metadata: metadata,
            }),
            returnValue: _i7.Future<_i4.CreditConsumptionResult>.value(
              _FakeCreditConsumptionResult_3(
                this,
                Invocation.method(#consumeCreditsForGeneration, [], {
                  #amount: amount,
                  #generationId: generationId,
                  #metadata: metadata,
                }),
              ),
            ),
          )
          as _i7.Future<_i4.CreditConsumptionResult>);

  @override
  _i7.Future<bool> canGenerateRoute() =>
      (super.noSuchMethod(
            Invocation.method(#canGenerateRoute, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<int> getAvailableCredits() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableCredits, []),
            returnValue: _i7.Future<int>.value(0),
          )
          as _i7.Future<int>);

  @override
  void ensureCreditDataLoaded() => super.noSuchMethod(
    Invocation.method(#ensureCreditDataLoaded, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AppDataBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDataBloc extends _i1.Mock implements _i9.AppDataBloc {
  MockAppDataBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isDataReady =>
      (super.noSuchMethod(Invocation.getter(#isDataReady), returnValue: false)
          as bool);

  @override
  _i5.AppDataState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAppDataState_4(this, Invocation.getter(#state)),
          )
          as _i5.AppDataState);

  @override
  _i7.Stream<_i5.AppDataState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i7.Stream<_i5.AppDataState>.empty(),
          )
          as _i7.Stream<_i5.AppDataState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i10.AppDataEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i10.AppDataEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i5.AppDataState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i10.AppDataEvent>(
    _i11.EventHandler<E, _i5.AppDataState>? handler, {
    _i11.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i11.Transition<_i10.AppDataEvent, _i5.AppDataState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void onChange(_i11.Change<_i5.AppDataState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ScreenshotService].
///
/// See the documentation for Mockito's code generation for more information.
class MockScreenshotService extends _i1.Mock implements _i12.ScreenshotService {
  MockScreenshotService() {
    _i1.throwOnMissingStub(this);
  }
}
